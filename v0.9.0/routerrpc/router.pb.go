// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v0.9.0/routerrpc/router.proto

package routerrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	lnrpc "github.com/lightningnetwork/lnd/lnrpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PaymentState int32

const (
	//*
	//Payment is still in flight.
	PaymentState_IN_FLIGHT PaymentState = 0
	//*
	//Payment completed successfully.
	PaymentState_SUCCEEDED PaymentState = 1
	//*
	//There are more routes to try, but the payment timeout was exceeded.
	PaymentState_FAILED_TIMEOUT PaymentState = 2
	//*
	//All possible routes were tried and failed permanently. Or were no
	//routes to the destination at all.
	PaymentState_FAILED_NO_ROUTE PaymentState = 3
	//*
	//A non-recoverable error has occured.
	PaymentState_FAILED_ERROR PaymentState = 4
	//*
	//Payment details incorrect (unknown hash, invalid amt or
	//invalid final cltv delta)
	PaymentState_FAILED_INCORRECT_PAYMENT_DETAILS PaymentState = 5
	//*
	//Insufficient local balance.
	PaymentState_FAILED_INSUFFICIENT_BALANCE PaymentState = 6
)

var PaymentState_name = map[int32]string{
	0: "IN_FLIGHT",
	1: "SUCCEEDED",
	2: "FAILED_TIMEOUT",
	3: "FAILED_NO_ROUTE",
	4: "FAILED_ERROR",
	5: "FAILED_INCORRECT_PAYMENT_DETAILS",
	6: "FAILED_INSUFFICIENT_BALANCE",
}

var PaymentState_value = map[string]int32{
	"IN_FLIGHT":                        0,
	"SUCCEEDED":                        1,
	"FAILED_TIMEOUT":                   2,
	"FAILED_NO_ROUTE":                  3,
	"FAILED_ERROR":                     4,
	"FAILED_INCORRECT_PAYMENT_DETAILS": 5,
	"FAILED_INSUFFICIENT_BALANCE":      6,
}

func (x PaymentState) String() string {
	return proto.EnumName(PaymentState_name, int32(x))
}

func (PaymentState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{0}
}

type Failure_FailureCode int32

const (
	//*
	//The numbers assigned in this enumeration match the failure codes as
	//defined in BOLT #4. Because protobuf 3 requires enums to start with 0,
	//a RESERVED value is added.
	Failure_RESERVED                             Failure_FailureCode = 0
	Failure_INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS Failure_FailureCode = 1
	Failure_INCORRECT_PAYMENT_AMOUNT             Failure_FailureCode = 2
	Failure_FINAL_INCORRECT_CLTV_EXPIRY          Failure_FailureCode = 3
	Failure_FINAL_INCORRECT_HTLC_AMOUNT          Failure_FailureCode = 4
	Failure_FINAL_EXPIRY_TOO_SOON                Failure_FailureCode = 5
	Failure_INVALID_REALM                        Failure_FailureCode = 6
	Failure_EXPIRY_TOO_SOON                      Failure_FailureCode = 7
	Failure_INVALID_ONION_VERSION                Failure_FailureCode = 8
	Failure_INVALID_ONION_HMAC                   Failure_FailureCode = 9
	Failure_INVALID_ONION_KEY                    Failure_FailureCode = 10
	Failure_AMOUNT_BELOW_MINIMUM                 Failure_FailureCode = 11
	Failure_FEE_INSUFFICIENT                     Failure_FailureCode = 12
	Failure_INCORRECT_CLTV_EXPIRY                Failure_FailureCode = 13
	Failure_CHANNEL_DISABLED                     Failure_FailureCode = 14
	Failure_TEMPORARY_CHANNEL_FAILURE            Failure_FailureCode = 15
	Failure_REQUIRED_NODE_FEATURE_MISSING        Failure_FailureCode = 16
	Failure_REQUIRED_CHANNEL_FEATURE_MISSING     Failure_FailureCode = 17
	Failure_UNKNOWN_NEXT_PEER                    Failure_FailureCode = 18
	Failure_TEMPORARY_NODE_FAILURE               Failure_FailureCode = 19
	Failure_PERMANENT_NODE_FAILURE               Failure_FailureCode = 20
	Failure_PERMANENT_CHANNEL_FAILURE            Failure_FailureCode = 21
	Failure_EXPIRY_TOO_FAR                       Failure_FailureCode = 22
	Failure_MPP_TIMEOUT                          Failure_FailureCode = 23
	//*
	//The error source is known, but the failure itself couldn't be decoded.
	Failure_UNKNOWN_FAILURE Failure_FailureCode = 998
	//*
	//An unreadable failure result is returned if the received failure message
	//cannot be decrypted. In that case the error source is unknown.
	Failure_UNREADABLE_FAILURE Failure_FailureCode = 999
)

var Failure_FailureCode_name = map[int32]string{
	0:   "RESERVED",
	1:   "INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS",
	2:   "INCORRECT_PAYMENT_AMOUNT",
	3:   "FINAL_INCORRECT_CLTV_EXPIRY",
	4:   "FINAL_INCORRECT_HTLC_AMOUNT",
	5:   "FINAL_EXPIRY_TOO_SOON",
	6:   "INVALID_REALM",
	7:   "EXPIRY_TOO_SOON",
	8:   "INVALID_ONION_VERSION",
	9:   "INVALID_ONION_HMAC",
	10:  "INVALID_ONION_KEY",
	11:  "AMOUNT_BELOW_MINIMUM",
	12:  "FEE_INSUFFICIENT",
	13:  "INCORRECT_CLTV_EXPIRY",
	14:  "CHANNEL_DISABLED",
	15:  "TEMPORARY_CHANNEL_FAILURE",
	16:  "REQUIRED_NODE_FEATURE_MISSING",
	17:  "REQUIRED_CHANNEL_FEATURE_MISSING",
	18:  "UNKNOWN_NEXT_PEER",
	19:  "TEMPORARY_NODE_FAILURE",
	20:  "PERMANENT_NODE_FAILURE",
	21:  "PERMANENT_CHANNEL_FAILURE",
	22:  "EXPIRY_TOO_FAR",
	23:  "MPP_TIMEOUT",
	998: "UNKNOWN_FAILURE",
	999: "UNREADABLE_FAILURE",
}

var Failure_FailureCode_value = map[string]int32{
	"RESERVED":                             0,
	"INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS": 1,
	"INCORRECT_PAYMENT_AMOUNT":             2,
	"FINAL_INCORRECT_CLTV_EXPIRY":          3,
	"FINAL_INCORRECT_HTLC_AMOUNT":          4,
	"FINAL_EXPIRY_TOO_SOON":                5,
	"INVALID_REALM":                        6,
	"EXPIRY_TOO_SOON":                      7,
	"INVALID_ONION_VERSION":                8,
	"INVALID_ONION_HMAC":                   9,
	"INVALID_ONION_KEY":                    10,
	"AMOUNT_BELOW_MINIMUM":                 11,
	"FEE_INSUFFICIENT":                     12,
	"INCORRECT_CLTV_EXPIRY":                13,
	"CHANNEL_DISABLED":                     14,
	"TEMPORARY_CHANNEL_FAILURE":            15,
	"REQUIRED_NODE_FEATURE_MISSING":        16,
	"REQUIRED_CHANNEL_FEATURE_MISSING":     17,
	"UNKNOWN_NEXT_PEER":                    18,
	"TEMPORARY_NODE_FAILURE":               19,
	"PERMANENT_NODE_FAILURE":               20,
	"PERMANENT_CHANNEL_FAILURE":            21,
	"EXPIRY_TOO_FAR":                       22,
	"MPP_TIMEOUT":                          23,
	"UNKNOWN_FAILURE":                      998,
	"UNREADABLE_FAILURE":                   999,
}

func (x Failure_FailureCode) String() string {
	return proto.EnumName(Failure_FailureCode_name, int32(x))
}

func (Failure_FailureCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{7, 0}
}

type SendPaymentRequest struct {
	/// The identity pubkey of the payment recipient
	Dest []byte `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	//*
	//Number of satoshis to send.
	//
	//The fields amt and amt_msat are mutually exclusive.
	Amt int64 `protobuf:"varint,2,opt,name=amt,proto3" json:"amt,omitempty"`
	//*
	//Number of millisatoshis to send.
	//
	//The fields amt and amt_msat are mutually exclusive.
	AmtMsat int64 `protobuf:"varint,12,opt,name=amt_msat,json=amtMsat,proto3" json:"amt_msat,omitempty"`
	/// The hash to use within the payment's HTLC
	PaymentHash []byte `protobuf:"bytes,3,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	//*
	//The CLTV delta from the current height that should be used to set the
	//timelock for the final hop.
	FinalCltvDelta int32 `protobuf:"varint,4,opt,name=final_cltv_delta,json=finalCltvDelta,proto3" json:"final_cltv_delta,omitempty"`
	//*
	//A bare-bones invoice for a payment within the Lightning Network.  With the
	//details of the invoice, the sender has all the data necessary to send a
	//payment to the recipient. The amount in the payment request may be zero. In
	//that case it is required to set the amt field as well. If no payment request
	//is specified, the following fields are required: dest, amt and payment_hash.
	PaymentRequest string `protobuf:"bytes,5,opt,name=payment_request,json=paymentRequest,proto3" json:"payment_request,omitempty"`
	//*
	//An upper limit on the amount of time we should spend when attempting to
	//fulfill the payment. This is expressed in seconds. If we cannot make a
	//successful payment within this time frame, an error will be returned.
	//This field must be non-zero.
	TimeoutSeconds int32 `protobuf:"varint,6,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	//*
	//The maximum number of satoshis that will be paid as a fee of the payment.
	//If this field is left to the default value of 0, only zero-fee routes will
	//be considered. This usually means single hop routes connecting directly to
	//the destination. To send the payment without a fee limit, use max int here.
	//
	//The fields fee_limit_sat and fee_limit_msat are mutually exclusive.
	FeeLimitSat int64 `protobuf:"varint,7,opt,name=fee_limit_sat,json=feeLimitSat,proto3" json:"fee_limit_sat,omitempty"`
	//*
	//The maximum number of millisatoshis that will be paid as a fee of the
	//payment. If this field is left to the default value of 0, only zero-fee
	//routes will be considered. This usually means single hop routes connecting
	//directly to the destination. To send the payment without a fee limit, use
	//max int here.
	//
	//The fields fee_limit_sat and fee_limit_msat are mutually exclusive.
	FeeLimitMsat int64 `protobuf:"varint,13,opt,name=fee_limit_msat,json=feeLimitMsat,proto3" json:"fee_limit_msat,omitempty"`
	//*
	//The channel id of the channel that must be taken to the first hop. If zero,
	//any channel may be used.
	OutgoingChanId uint64 `protobuf:"varint,8,opt,name=outgoing_chan_id,json=outgoingChanId,proto3" json:"outgoing_chan_id,omitempty"`
	//*
	//The pubkey of the last hop of the route. If empty, any hop may be used.
	LastHopPubkey []byte `protobuf:"bytes,14,opt,name=last_hop_pubkey,json=lastHopPubkey,proto3" json:"last_hop_pubkey,omitempty"`
	//*
	//An optional maximum total time lock for the route. This should not exceed
	//lnd's `--max-cltv-expiry` setting. If zero, then the value of
	//`--max-cltv-expiry` is enforced.
	CltvLimit int32 `protobuf:"varint,9,opt,name=cltv_limit,json=cltvLimit,proto3" json:"cltv_limit,omitempty"`
	//*
	//Optional route hints to reach the destination through private channels.
	RouteHints []*lnrpc.RouteHint `protobuf:"bytes,10,rep,name=route_hints,proto3" json:"route_hints,omitempty"`
	//*
	//An optional field that can be used to pass an arbitrary set of TLV records
	//to a peer which understands the new records. This can be used to pass
	//application specific data during the payment attempt. Record types are
	//required to be in the custom range >= 65536. When using REST, the values
	//must be encoded as base64.
	DestCustomRecords map[uint64][]byte `protobuf:"bytes,11,rep,name=dest_custom_records,json=destCustomRecords,proto3" json:"dest_custom_records,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// If set, circular payments to self are permitted.
	AllowSelfPayment bool `protobuf:"varint,15,opt,name=allow_self_payment,json=allowSelfPayment,proto3" json:"allow_self_payment,omitempty"`
	//*
	//Features assumed to be supported by the final node. All transitive feature
	//depdencies must also be set properly. For a given feature bit pair, either
	//optional or remote may be set, but not both. If this field is nil or empty,
	//the router will try to load destination features from the graph as a
	//fallback.
	DestFeatures         []lnrpc.FeatureBit `protobuf:"varint,16,rep,packed,name=dest_features,json=destFeatures,proto3,enum=lnrpc.FeatureBit" json:"dest_features,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SendPaymentRequest) Reset()         { *m = SendPaymentRequest{} }
func (m *SendPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*SendPaymentRequest) ProtoMessage()    {}
func (*SendPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{0}
}

func (m *SendPaymentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendPaymentRequest.Unmarshal(m, b)
}
func (m *SendPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendPaymentRequest.Marshal(b, m, deterministic)
}
func (m *SendPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendPaymentRequest.Merge(m, src)
}
func (m *SendPaymentRequest) XXX_Size() int {
	return xxx_messageInfo_SendPaymentRequest.Size(m)
}
func (m *SendPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendPaymentRequest proto.InternalMessageInfo

func (m *SendPaymentRequest) GetDest() []byte {
	if m != nil {
		return m.Dest
	}
	return nil
}

func (m *SendPaymentRequest) GetAmt() int64 {
	if m != nil {
		return m.Amt
	}
	return 0
}

func (m *SendPaymentRequest) GetAmtMsat() int64 {
	if m != nil {
		return m.AmtMsat
	}
	return 0
}

func (m *SendPaymentRequest) GetPaymentHash() []byte {
	if m != nil {
		return m.PaymentHash
	}
	return nil
}

func (m *SendPaymentRequest) GetFinalCltvDelta() int32 {
	if m != nil {
		return m.FinalCltvDelta
	}
	return 0
}

func (m *SendPaymentRequest) GetPaymentRequest() string {
	if m != nil {
		return m.PaymentRequest
	}
	return ""
}

func (m *SendPaymentRequest) GetTimeoutSeconds() int32 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *SendPaymentRequest) GetFeeLimitSat() int64 {
	if m != nil {
		return m.FeeLimitSat
	}
	return 0
}

func (m *SendPaymentRequest) GetFeeLimitMsat() int64 {
	if m != nil {
		return m.FeeLimitMsat
	}
	return 0
}

func (m *SendPaymentRequest) GetOutgoingChanId() uint64 {
	if m != nil {
		return m.OutgoingChanId
	}
	return 0
}

func (m *SendPaymentRequest) GetLastHopPubkey() []byte {
	if m != nil {
		return m.LastHopPubkey
	}
	return nil
}

func (m *SendPaymentRequest) GetCltvLimit() int32 {
	if m != nil {
		return m.CltvLimit
	}
	return 0
}

func (m *SendPaymentRequest) GetRouteHints() []*lnrpc.RouteHint {
	if m != nil {
		return m.RouteHints
	}
	return nil
}

func (m *SendPaymentRequest) GetDestCustomRecords() map[uint64][]byte {
	if m != nil {
		return m.DestCustomRecords
	}
	return nil
}

func (m *SendPaymentRequest) GetAllowSelfPayment() bool {
	if m != nil {
		return m.AllowSelfPayment
	}
	return false
}

func (m *SendPaymentRequest) GetDestFeatures() []lnrpc.FeatureBit {
	if m != nil {
		return m.DestFeatures
	}
	return nil
}

type TrackPaymentRequest struct {
	/// The hash of the payment to look up.
	PaymentHash          []byte   `protobuf:"bytes,1,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackPaymentRequest) Reset()         { *m = TrackPaymentRequest{} }
func (m *TrackPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*TrackPaymentRequest) ProtoMessage()    {}
func (*TrackPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{1}
}

func (m *TrackPaymentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackPaymentRequest.Unmarshal(m, b)
}
func (m *TrackPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackPaymentRequest.Marshal(b, m, deterministic)
}
func (m *TrackPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackPaymentRequest.Merge(m, src)
}
func (m *TrackPaymentRequest) XXX_Size() int {
	return xxx_messageInfo_TrackPaymentRequest.Size(m)
}
func (m *TrackPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrackPaymentRequest proto.InternalMessageInfo

func (m *TrackPaymentRequest) GetPaymentHash() []byte {
	if m != nil {
		return m.PaymentHash
	}
	return nil
}

type PaymentStatus struct {
	/// Current state the payment is in.
	State PaymentState `protobuf:"varint,1,opt,name=state,proto3,enum=routerrpc.PaymentState" json:"state,omitempty"`
	//*
	//The pre-image of the payment when state is SUCCEEDED.
	Preimage []byte `protobuf:"bytes,2,opt,name=preimage,proto3" json:"preimage,omitempty"`
	//*
	//The taken route when state is SUCCEEDED.
	Route *lnrpc.Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
	//*
	//The HTLCs made in attempt to settle the payment [EXPERIMENTAL].
	Htlcs                []*lnrpc.HTLCAttempt `protobuf:"bytes,4,rep,name=htlcs,proto3" json:"htlcs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PaymentStatus) Reset()         { *m = PaymentStatus{} }
func (m *PaymentStatus) String() string { return proto.CompactTextString(m) }
func (*PaymentStatus) ProtoMessage()    {}
func (*PaymentStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{2}
}

func (m *PaymentStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentStatus.Unmarshal(m, b)
}
func (m *PaymentStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentStatus.Marshal(b, m, deterministic)
}
func (m *PaymentStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentStatus.Merge(m, src)
}
func (m *PaymentStatus) XXX_Size() int {
	return xxx_messageInfo_PaymentStatus.Size(m)
}
func (m *PaymentStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentStatus proto.InternalMessageInfo

func (m *PaymentStatus) GetState() PaymentState {
	if m != nil {
		return m.State
	}
	return PaymentState_IN_FLIGHT
}

func (m *PaymentStatus) GetPreimage() []byte {
	if m != nil {
		return m.Preimage
	}
	return nil
}

func (m *PaymentStatus) GetRoute() *lnrpc.Route {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *PaymentStatus) GetHtlcs() []*lnrpc.HTLCAttempt {
	if m != nil {
		return m.Htlcs
	}
	return nil
}

type RouteFeeRequest struct {
	//*
	//The destination once wishes to obtain a routing fee quote to.
	Dest []byte `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	//*
	//The amount one wishes to send to the target destination.
	AmtSat               int64    `protobuf:"varint,2,opt,name=amt_sat,json=amtSat,proto3" json:"amt_sat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteFeeRequest) Reset()         { *m = RouteFeeRequest{} }
func (m *RouteFeeRequest) String() string { return proto.CompactTextString(m) }
func (*RouteFeeRequest) ProtoMessage()    {}
func (*RouteFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{3}
}

func (m *RouteFeeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteFeeRequest.Unmarshal(m, b)
}
func (m *RouteFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteFeeRequest.Marshal(b, m, deterministic)
}
func (m *RouteFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteFeeRequest.Merge(m, src)
}
func (m *RouteFeeRequest) XXX_Size() int {
	return xxx_messageInfo_RouteFeeRequest.Size(m)
}
func (m *RouteFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteFeeRequest proto.InternalMessageInfo

func (m *RouteFeeRequest) GetDest() []byte {
	if m != nil {
		return m.Dest
	}
	return nil
}

func (m *RouteFeeRequest) GetAmtSat() int64 {
	if m != nil {
		return m.AmtSat
	}
	return 0
}

type RouteFeeResponse struct {
	//*
	//A lower bound of the estimated fee to the target destination within the
	//network, expressed in milli-satoshis.
	RoutingFeeMsat int64 `protobuf:"varint,1,opt,name=routing_fee_msat,json=routingFeeMsat,proto3" json:"routing_fee_msat,omitempty"`
	//*
	//An estimate of the worst case time delay that can occur. Note that callers
	//will still need to factor in the final CLTV delta of the last hop into this
	//value.
	TimeLockDelay        int64    `protobuf:"varint,2,opt,name=time_lock_delay,json=timeLockDelay,proto3" json:"time_lock_delay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteFeeResponse) Reset()         { *m = RouteFeeResponse{} }
func (m *RouteFeeResponse) String() string { return proto.CompactTextString(m) }
func (*RouteFeeResponse) ProtoMessage()    {}
func (*RouteFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{4}
}

func (m *RouteFeeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteFeeResponse.Unmarshal(m, b)
}
func (m *RouteFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteFeeResponse.Marshal(b, m, deterministic)
}
func (m *RouteFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteFeeResponse.Merge(m, src)
}
func (m *RouteFeeResponse) XXX_Size() int {
	return xxx_messageInfo_RouteFeeResponse.Size(m)
}
func (m *RouteFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteFeeResponse proto.InternalMessageInfo

func (m *RouteFeeResponse) GetRoutingFeeMsat() int64 {
	if m != nil {
		return m.RoutingFeeMsat
	}
	return 0
}

func (m *RouteFeeResponse) GetTimeLockDelay() int64 {
	if m != nil {
		return m.TimeLockDelay
	}
	return 0
}

type SendToRouteRequest struct {
	/// The payment hash to use for the HTLC.
	PaymentHash []byte `protobuf:"bytes,1,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	/// Route that should be used to attempt to complete the payment.
	Route                *lnrpc.Route `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SendToRouteRequest) Reset()         { *m = SendToRouteRequest{} }
func (m *SendToRouteRequest) String() string { return proto.CompactTextString(m) }
func (*SendToRouteRequest) ProtoMessage()    {}
func (*SendToRouteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{5}
}

func (m *SendToRouteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendToRouteRequest.Unmarshal(m, b)
}
func (m *SendToRouteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendToRouteRequest.Marshal(b, m, deterministic)
}
func (m *SendToRouteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendToRouteRequest.Merge(m, src)
}
func (m *SendToRouteRequest) XXX_Size() int {
	return xxx_messageInfo_SendToRouteRequest.Size(m)
}
func (m *SendToRouteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendToRouteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendToRouteRequest proto.InternalMessageInfo

func (m *SendToRouteRequest) GetPaymentHash() []byte {
	if m != nil {
		return m.PaymentHash
	}
	return nil
}

func (m *SendToRouteRequest) GetRoute() *lnrpc.Route {
	if m != nil {
		return m.Route
	}
	return nil
}

type SendToRouteResponse struct {
	/// The preimage obtained by making the payment.
	Preimage []byte `protobuf:"bytes,1,opt,name=preimage,proto3" json:"preimage,omitempty"`
	/// The failure message in case the payment failed.
	Failure              *Failure `protobuf:"bytes,2,opt,name=failure,proto3" json:"failure,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendToRouteResponse) Reset()         { *m = SendToRouteResponse{} }
func (m *SendToRouteResponse) String() string { return proto.CompactTextString(m) }
func (*SendToRouteResponse) ProtoMessage()    {}
func (*SendToRouteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{6}
}

func (m *SendToRouteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendToRouteResponse.Unmarshal(m, b)
}
func (m *SendToRouteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendToRouteResponse.Marshal(b, m, deterministic)
}
func (m *SendToRouteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendToRouteResponse.Merge(m, src)
}
func (m *SendToRouteResponse) XXX_Size() int {
	return xxx_messageInfo_SendToRouteResponse.Size(m)
}
func (m *SendToRouteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendToRouteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendToRouteResponse proto.InternalMessageInfo

func (m *SendToRouteResponse) GetPreimage() []byte {
	if m != nil {
		return m.Preimage
	}
	return nil
}

func (m *SendToRouteResponse) GetFailure() *Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

type Failure struct {
	/// Failure code as defined in the Lightning spec
	Code Failure_FailureCode `protobuf:"varint,1,opt,name=code,proto3,enum=routerrpc.Failure_FailureCode" json:"code,omitempty"`
	/// An optional channel update message.
	ChannelUpdate *ChannelUpdate `protobuf:"bytes,3,opt,name=channel_update,json=channelUpdate,proto3" json:"channel_update,omitempty"`
	/// A failure type-dependent htlc value.
	HtlcMsat uint64 `protobuf:"varint,4,opt,name=htlc_msat,json=htlcMsat,proto3" json:"htlc_msat,omitempty"`
	/// The sha256 sum of the onion payload.
	OnionSha_256 []byte `protobuf:"bytes,5,opt,name=onion_sha_256,json=onionSha256,proto3" json:"onion_sha_256,omitempty"`
	/// A failure type-dependent cltv expiry value.
	CltvExpiry uint32 `protobuf:"varint,6,opt,name=cltv_expiry,json=cltvExpiry,proto3" json:"cltv_expiry,omitempty"`
	/// A failure type-dependent flags value.
	Flags uint32 `protobuf:"varint,7,opt,name=flags,proto3" json:"flags,omitempty"`
	//*
	//The position in the path of the intermediate or final node that generated
	//the failure message. Position zero is the sender node.
	FailureSourceIndex uint32 `protobuf:"varint,8,opt,name=failure_source_index,json=failureSourceIndex,proto3" json:"failure_source_index,omitempty"`
	/// A failure type-dependent block height.
	Height               uint32   `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Failure) Reset()         { *m = Failure{} }
func (m *Failure) String() string { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()    {}
func (*Failure) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{7}
}

func (m *Failure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Failure.Unmarshal(m, b)
}
func (m *Failure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Failure.Marshal(b, m, deterministic)
}
func (m *Failure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Failure.Merge(m, src)
}
func (m *Failure) XXX_Size() int {
	return xxx_messageInfo_Failure.Size(m)
}
func (m *Failure) XXX_DiscardUnknown() {
	xxx_messageInfo_Failure.DiscardUnknown(m)
}

var xxx_messageInfo_Failure proto.InternalMessageInfo

func (m *Failure) GetCode() Failure_FailureCode {
	if m != nil {
		return m.Code
	}
	return Failure_RESERVED
}

func (m *Failure) GetChannelUpdate() *ChannelUpdate {
	if m != nil {
		return m.ChannelUpdate
	}
	return nil
}

func (m *Failure) GetHtlcMsat() uint64 {
	if m != nil {
		return m.HtlcMsat
	}
	return 0
}

func (m *Failure) GetOnionSha_256() []byte {
	if m != nil {
		return m.OnionSha_256
	}
	return nil
}

func (m *Failure) GetCltvExpiry() uint32 {
	if m != nil {
		return m.CltvExpiry
	}
	return 0
}

func (m *Failure) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Failure) GetFailureSourceIndex() uint32 {
	if m != nil {
		return m.FailureSourceIndex
	}
	return 0
}

func (m *Failure) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ChannelUpdate struct {
	//*
	//The signature that validates the announced data and proves the ownership
	//of node id.
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	//*
	//The target chain that this channel was opened within. This value
	//should be the genesis hash of the target chain. Along with the short
	//channel ID, this uniquely identifies the channel globally in a
	//blockchain.
	ChainHash []byte `protobuf:"bytes,2,opt,name=chain_hash,json=chainHash,proto3" json:"chain_hash,omitempty"`
	//*
	//The unique description of the funding transaction.
	ChanId uint64 `protobuf:"varint,3,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
	//*
	//A timestamp that allows ordering in the case of multiple announcements.
	//We should ignore the message if timestamp is not greater than the
	//last-received.
	Timestamp uint32 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	//*
	//The bitfield that describes whether optional fields are present in this
	//update. Currently, the least-significant bit must be set to 1 if the
	//optional field MaxHtlc is present.
	MessageFlags uint32 `protobuf:"varint,10,opt,name=message_flags,json=messageFlags,proto3" json:"message_flags,omitempty"`
	//*
	//The bitfield that describes additional meta-data concerning how the
	//update is to be interpreted. Currently, the least-significant bit must be
	//set to 0 if the creating node corresponds to the first node in the
	//previously sent channel announcement and 1 otherwise. If the second bit
	//is set, then the channel is set to be disabled.
	ChannelFlags uint32 `protobuf:"varint,5,opt,name=channel_flags,json=channelFlags,proto3" json:"channel_flags,omitempty"`
	//*
	//The minimum number of blocks this node requires to be added to the expiry
	//of HTLCs. This is a security parameter determined by the node operator.
	//This value represents the required gap between the time locks of the
	//incoming and outgoing HTLC's set to this node.
	TimeLockDelta uint32 `protobuf:"varint,6,opt,name=time_lock_delta,json=timeLockDelta,proto3" json:"time_lock_delta,omitempty"`
	//*
	//The minimum HTLC value which will be accepted.
	HtlcMinimumMsat uint64 `protobuf:"varint,7,opt,name=htlc_minimum_msat,json=htlcMinimumMsat,proto3" json:"htlc_minimum_msat,omitempty"`
	//*
	//The base fee that must be used for incoming HTLC's to this particular
	//channel. This value will be tacked onto the required for a payment
	//independent of the size of the payment.
	BaseFee uint32 `protobuf:"varint,8,opt,name=base_fee,json=baseFee,proto3" json:"base_fee,omitempty"`
	//*
	//The fee rate that will be charged per millionth of a satoshi.
	FeeRate uint32 `protobuf:"varint,9,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	//*
	//The maximum HTLC value which will be accepted.
	HtlcMaximumMsat uint64 `protobuf:"varint,11,opt,name=htlc_maximum_msat,json=htlcMaximumMsat,proto3" json:"htlc_maximum_msat,omitempty"`
	//*
	//The set of data that was appended to this message, some of which we may
	//not actually know how to iterate or parse. By holding onto this data, we
	//ensure that we're able to properly validate the set of signatures that
	//cover these new fields, and ensure we're able to make upgrades to the
	//network in a forwards compatible manner.
	ExtraOpaqueData      []byte   `protobuf:"bytes,12,opt,name=extra_opaque_data,json=extraOpaqueData,proto3" json:"extra_opaque_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelUpdate) Reset()         { *m = ChannelUpdate{} }
func (m *ChannelUpdate) String() string { return proto.CompactTextString(m) }
func (*ChannelUpdate) ProtoMessage()    {}
func (*ChannelUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{8}
}

func (m *ChannelUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelUpdate.Unmarshal(m, b)
}
func (m *ChannelUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelUpdate.Marshal(b, m, deterministic)
}
func (m *ChannelUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelUpdate.Merge(m, src)
}
func (m *ChannelUpdate) XXX_Size() int {
	return xxx_messageInfo_ChannelUpdate.Size(m)
}
func (m *ChannelUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelUpdate proto.InternalMessageInfo

func (m *ChannelUpdate) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ChannelUpdate) GetChainHash() []byte {
	if m != nil {
		return m.ChainHash
	}
	return nil
}

func (m *ChannelUpdate) GetChanId() uint64 {
	if m != nil {
		return m.ChanId
	}
	return 0
}

func (m *ChannelUpdate) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ChannelUpdate) GetMessageFlags() uint32 {
	if m != nil {
		return m.MessageFlags
	}
	return 0
}

func (m *ChannelUpdate) GetChannelFlags() uint32 {
	if m != nil {
		return m.ChannelFlags
	}
	return 0
}

func (m *ChannelUpdate) GetTimeLockDelta() uint32 {
	if m != nil {
		return m.TimeLockDelta
	}
	return 0
}

func (m *ChannelUpdate) GetHtlcMinimumMsat() uint64 {
	if m != nil {
		return m.HtlcMinimumMsat
	}
	return 0
}

func (m *ChannelUpdate) GetBaseFee() uint32 {
	if m != nil {
		return m.BaseFee
	}
	return 0
}

func (m *ChannelUpdate) GetFeeRate() uint32 {
	if m != nil {
		return m.FeeRate
	}
	return 0
}

func (m *ChannelUpdate) GetHtlcMaximumMsat() uint64 {
	if m != nil {
		return m.HtlcMaximumMsat
	}
	return 0
}

func (m *ChannelUpdate) GetExtraOpaqueData() []byte {
	if m != nil {
		return m.ExtraOpaqueData
	}
	return nil
}

type ResetMissionControlRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResetMissionControlRequest) Reset()         { *m = ResetMissionControlRequest{} }
func (m *ResetMissionControlRequest) String() string { return proto.CompactTextString(m) }
func (*ResetMissionControlRequest) ProtoMessage()    {}
func (*ResetMissionControlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{9}
}

func (m *ResetMissionControlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResetMissionControlRequest.Unmarshal(m, b)
}
func (m *ResetMissionControlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResetMissionControlRequest.Marshal(b, m, deterministic)
}
func (m *ResetMissionControlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetMissionControlRequest.Merge(m, src)
}
func (m *ResetMissionControlRequest) XXX_Size() int {
	return xxx_messageInfo_ResetMissionControlRequest.Size(m)
}
func (m *ResetMissionControlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetMissionControlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResetMissionControlRequest proto.InternalMessageInfo

type ResetMissionControlResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResetMissionControlResponse) Reset()         { *m = ResetMissionControlResponse{} }
func (m *ResetMissionControlResponse) String() string { return proto.CompactTextString(m) }
func (*ResetMissionControlResponse) ProtoMessage()    {}
func (*ResetMissionControlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{10}
}

func (m *ResetMissionControlResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResetMissionControlResponse.Unmarshal(m, b)
}
func (m *ResetMissionControlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResetMissionControlResponse.Marshal(b, m, deterministic)
}
func (m *ResetMissionControlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetMissionControlResponse.Merge(m, src)
}
func (m *ResetMissionControlResponse) XXX_Size() int {
	return xxx_messageInfo_ResetMissionControlResponse.Size(m)
}
func (m *ResetMissionControlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetMissionControlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResetMissionControlResponse proto.InternalMessageInfo

type QueryMissionControlRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryMissionControlRequest) Reset()         { *m = QueryMissionControlRequest{} }
func (m *QueryMissionControlRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMissionControlRequest) ProtoMessage()    {}
func (*QueryMissionControlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{11}
}

func (m *QueryMissionControlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryMissionControlRequest.Unmarshal(m, b)
}
func (m *QueryMissionControlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryMissionControlRequest.Marshal(b, m, deterministic)
}
func (m *QueryMissionControlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMissionControlRequest.Merge(m, src)
}
func (m *QueryMissionControlRequest) XXX_Size() int {
	return xxx_messageInfo_QueryMissionControlRequest.Size(m)
}
func (m *QueryMissionControlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMissionControlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMissionControlRequest proto.InternalMessageInfo

/// QueryMissionControlResponse contains mission control state.
type QueryMissionControlResponse struct {
	/// Node pair-level mission control state.
	Pairs                []*PairHistory `protobuf:"bytes,2,rep,name=pairs,proto3" json:"pairs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *QueryMissionControlResponse) Reset()         { *m = QueryMissionControlResponse{} }
func (m *QueryMissionControlResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMissionControlResponse) ProtoMessage()    {}
func (*QueryMissionControlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{12}
}

func (m *QueryMissionControlResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryMissionControlResponse.Unmarshal(m, b)
}
func (m *QueryMissionControlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryMissionControlResponse.Marshal(b, m, deterministic)
}
func (m *QueryMissionControlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMissionControlResponse.Merge(m, src)
}
func (m *QueryMissionControlResponse) XXX_Size() int {
	return xxx_messageInfo_QueryMissionControlResponse.Size(m)
}
func (m *QueryMissionControlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMissionControlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMissionControlResponse proto.InternalMessageInfo

func (m *QueryMissionControlResponse) GetPairs() []*PairHistory {
	if m != nil {
		return m.Pairs
	}
	return nil
}

/// PairHistory contains the mission control state for a particular node pair.
type PairHistory struct {
	/// The source node pubkey of the pair.
	NodeFrom []byte `protobuf:"bytes,1,opt,name=node_from,proto3" json:"node_from,omitempty"`
	/// The destination node pubkey of the pair.
	NodeTo               []byte    `protobuf:"bytes,2,opt,name=node_to,proto3" json:"node_to,omitempty"`
	History              *PairData `protobuf:"bytes,7,opt,name=history,proto3" json:"history,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PairHistory) Reset()         { *m = PairHistory{} }
func (m *PairHistory) String() string { return proto.CompactTextString(m) }
func (*PairHistory) ProtoMessage()    {}
func (*PairHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{13}
}

func (m *PairHistory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PairHistory.Unmarshal(m, b)
}
func (m *PairHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PairHistory.Marshal(b, m, deterministic)
}
func (m *PairHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairHistory.Merge(m, src)
}
func (m *PairHistory) XXX_Size() int {
	return xxx_messageInfo_PairHistory.Size(m)
}
func (m *PairHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_PairHistory.DiscardUnknown(m)
}

var xxx_messageInfo_PairHistory proto.InternalMessageInfo

func (m *PairHistory) GetNodeFrom() []byte {
	if m != nil {
		return m.NodeFrom
	}
	return nil
}

func (m *PairHistory) GetNodeTo() []byte {
	if m != nil {
		return m.NodeTo
	}
	return nil
}

func (m *PairHistory) GetHistory() *PairData {
	if m != nil {
		return m.History
	}
	return nil
}

type PairData struct {
	/// Time of last failure.
	FailTime int64 `protobuf:"varint,1,opt,name=fail_time,proto3" json:"fail_time,omitempty"`
	//*
	//Lowest amount that failed to forward rounded to whole sats. This may be
	//set to zero if the failure is independent of amount.
	FailAmtSat int64 `protobuf:"varint,2,opt,name=fail_amt_sat,proto3" json:"fail_amt_sat,omitempty"`
	//*
	//Lowest amount that failed to forward in millisats. This may be
	//set to zero if the failure is independent of amount.
	FailAmtMsat int64 `protobuf:"varint,4,opt,name=fail_amt_msat,proto3" json:"fail_amt_msat,omitempty"`
	/// Time of last success.
	SuccessTime int64 `protobuf:"varint,5,opt,name=success_time,proto3" json:"success_time,omitempty"`
	/// Highest amount that we could successfully forward rounded to whole sats.
	SuccessAmtSat int64 `protobuf:"varint,6,opt,name=success_amt_sat,proto3" json:"success_amt_sat,omitempty"`
	/// Highest amount that we could successfully forward in millisats.
	SuccessAmtMsat       int64    `protobuf:"varint,7,opt,name=success_amt_msat,proto3" json:"success_amt_msat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PairData) Reset()         { *m = PairData{} }
func (m *PairData) String() string { return proto.CompactTextString(m) }
func (*PairData) ProtoMessage()    {}
func (*PairData) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{14}
}

func (m *PairData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PairData.Unmarshal(m, b)
}
func (m *PairData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PairData.Marshal(b, m, deterministic)
}
func (m *PairData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairData.Merge(m, src)
}
func (m *PairData) XXX_Size() int {
	return xxx_messageInfo_PairData.Size(m)
}
func (m *PairData) XXX_DiscardUnknown() {
	xxx_messageInfo_PairData.DiscardUnknown(m)
}

var xxx_messageInfo_PairData proto.InternalMessageInfo

func (m *PairData) GetFailTime() int64 {
	if m != nil {
		return m.FailTime
	}
	return 0
}

func (m *PairData) GetFailAmtSat() int64 {
	if m != nil {
		return m.FailAmtSat
	}
	return 0
}

func (m *PairData) GetFailAmtMsat() int64 {
	if m != nil {
		return m.FailAmtMsat
	}
	return 0
}

func (m *PairData) GetSuccessTime() int64 {
	if m != nil {
		return m.SuccessTime
	}
	return 0
}

func (m *PairData) GetSuccessAmtSat() int64 {
	if m != nil {
		return m.SuccessAmtSat
	}
	return 0
}

func (m *PairData) GetSuccessAmtMsat() int64 {
	if m != nil {
		return m.SuccessAmtMsat
	}
	return 0
}

type QueryProbabilityRequest struct {
	/// The source node pubkey of the pair.
	FromNode []byte `protobuf:"bytes,1,opt,name=from_node,proto3" json:"from_node,omitempty"`
	/// The destination node pubkey of the pair.
	ToNode []byte `protobuf:"bytes,2,opt,name=to_node,proto3" json:"to_node,omitempty"`
	/// The amount for which to calculate a probability.
	AmtMsat              int64    `protobuf:"varint,3,opt,name=amt_msat,proto3" json:"amt_msat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryProbabilityRequest) Reset()         { *m = QueryProbabilityRequest{} }
func (m *QueryProbabilityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProbabilityRequest) ProtoMessage()    {}
func (*QueryProbabilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{15}
}

func (m *QueryProbabilityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryProbabilityRequest.Unmarshal(m, b)
}
func (m *QueryProbabilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryProbabilityRequest.Marshal(b, m, deterministic)
}
func (m *QueryProbabilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProbabilityRequest.Merge(m, src)
}
func (m *QueryProbabilityRequest) XXX_Size() int {
	return xxx_messageInfo_QueryProbabilityRequest.Size(m)
}
func (m *QueryProbabilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProbabilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProbabilityRequest proto.InternalMessageInfo

func (m *QueryProbabilityRequest) GetFromNode() []byte {
	if m != nil {
		return m.FromNode
	}
	return nil
}

func (m *QueryProbabilityRequest) GetToNode() []byte {
	if m != nil {
		return m.ToNode
	}
	return nil
}

func (m *QueryProbabilityRequest) GetAmtMsat() int64 {
	if m != nil {
		return m.AmtMsat
	}
	return 0
}

type QueryProbabilityResponse struct {
	/// The success probability for the requested pair.
	Probability float64 `protobuf:"fixed64,1,opt,name=probability,proto3" json:"probability,omitempty"`
	/// The historical data for the requested pair.
	History              *PairData `protobuf:"bytes,2,opt,name=history,proto3" json:"history,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *QueryProbabilityResponse) Reset()         { *m = QueryProbabilityResponse{} }
func (m *QueryProbabilityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProbabilityResponse) ProtoMessage()    {}
func (*QueryProbabilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{16}
}

func (m *QueryProbabilityResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryProbabilityResponse.Unmarshal(m, b)
}
func (m *QueryProbabilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryProbabilityResponse.Marshal(b, m, deterministic)
}
func (m *QueryProbabilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProbabilityResponse.Merge(m, src)
}
func (m *QueryProbabilityResponse) XXX_Size() int {
	return xxx_messageInfo_QueryProbabilityResponse.Size(m)
}
func (m *QueryProbabilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProbabilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProbabilityResponse proto.InternalMessageInfo

func (m *QueryProbabilityResponse) GetProbability() float64 {
	if m != nil {
		return m.Probability
	}
	return 0
}

func (m *QueryProbabilityResponse) GetHistory() *PairData {
	if m != nil {
		return m.History
	}
	return nil
}

type BuildRouteRequest struct {
	//*
	//The amount to send expressed in msat. If set to zero, the minimum routable
	//amount is used.
	AmtMsat int64 `protobuf:"varint,1,opt,name=amt_msat,json=amtMsat,proto3" json:"amt_msat,omitempty"`
	//*
	//CLTV delta from the current height that should be used for the timelock
	//of the final hop
	FinalCltvDelta int32 `protobuf:"varint,2,opt,name=final_cltv_delta,json=finalCltvDelta,proto3" json:"final_cltv_delta,omitempty"`
	//*
	//The channel id of the channel that must be taken to the first hop. If zero,
	//any channel may be used.
	OutgoingChanId uint64 `protobuf:"varint,3,opt,name=outgoing_chan_id,json=outgoingChanId,proto3" json:"outgoing_chan_id,omitempty"`
	//*
	//A list of hops that defines the route. This does not include the source hop
	//pubkey.
	HopPubkeys           [][]byte `protobuf:"bytes,4,rep,name=hop_pubkeys,json=hopPubkeys,proto3" json:"hop_pubkeys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildRouteRequest) Reset()         { *m = BuildRouteRequest{} }
func (m *BuildRouteRequest) String() string { return proto.CompactTextString(m) }
func (*BuildRouteRequest) ProtoMessage()    {}
func (*BuildRouteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{17}
}

func (m *BuildRouteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildRouteRequest.Unmarshal(m, b)
}
func (m *BuildRouteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildRouteRequest.Marshal(b, m, deterministic)
}
func (m *BuildRouteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildRouteRequest.Merge(m, src)
}
func (m *BuildRouteRequest) XXX_Size() int {
	return xxx_messageInfo_BuildRouteRequest.Size(m)
}
func (m *BuildRouteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildRouteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BuildRouteRequest proto.InternalMessageInfo

func (m *BuildRouteRequest) GetAmtMsat() int64 {
	if m != nil {
		return m.AmtMsat
	}
	return 0
}

func (m *BuildRouteRequest) GetFinalCltvDelta() int32 {
	if m != nil {
		return m.FinalCltvDelta
	}
	return 0
}

func (m *BuildRouteRequest) GetOutgoingChanId() uint64 {
	if m != nil {
		return m.OutgoingChanId
	}
	return 0
}

func (m *BuildRouteRequest) GetHopPubkeys() [][]byte {
	if m != nil {
		return m.HopPubkeys
	}
	return nil
}

type BuildRouteResponse struct {
	//*
	//Fully specified route that can be used to execute the payment.
	Route                *lnrpc.Route `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BuildRouteResponse) Reset()         { *m = BuildRouteResponse{} }
func (m *BuildRouteResponse) String() string { return proto.CompactTextString(m) }
func (*BuildRouteResponse) ProtoMessage()    {}
func (*BuildRouteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_24ba73bc3a65b061, []int{18}
}

func (m *BuildRouteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildRouteResponse.Unmarshal(m, b)
}
func (m *BuildRouteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildRouteResponse.Marshal(b, m, deterministic)
}
func (m *BuildRouteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildRouteResponse.Merge(m, src)
}
func (m *BuildRouteResponse) XXX_Size() int {
	return xxx_messageInfo_BuildRouteResponse.Size(m)
}
func (m *BuildRouteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildRouteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BuildRouteResponse proto.InternalMessageInfo

func (m *BuildRouteResponse) GetRoute() *lnrpc.Route {
	if m != nil {
		return m.Route
	}
	return nil
}

func init() {
	proto.RegisterEnum("routerrpc.PaymentState", PaymentState_name, PaymentState_value)
	proto.RegisterEnum("routerrpc.Failure_FailureCode", Failure_FailureCode_name, Failure_FailureCode_value)
	proto.RegisterType((*SendPaymentRequest)(nil), "routerrpc.SendPaymentRequest")
	proto.RegisterMapType((map[uint64][]byte)(nil), "routerrpc.SendPaymentRequest.DestCustomRecordsEntry")
	proto.RegisterType((*TrackPaymentRequest)(nil), "routerrpc.TrackPaymentRequest")
	proto.RegisterType((*PaymentStatus)(nil), "routerrpc.PaymentStatus")
	proto.RegisterType((*RouteFeeRequest)(nil), "routerrpc.RouteFeeRequest")
	proto.RegisterType((*RouteFeeResponse)(nil), "routerrpc.RouteFeeResponse")
	proto.RegisterType((*SendToRouteRequest)(nil), "routerrpc.SendToRouteRequest")
	proto.RegisterType((*SendToRouteResponse)(nil), "routerrpc.SendToRouteResponse")
	proto.RegisterType((*Failure)(nil), "routerrpc.Failure")
	proto.RegisterType((*ChannelUpdate)(nil), "routerrpc.ChannelUpdate")
	proto.RegisterType((*ResetMissionControlRequest)(nil), "routerrpc.ResetMissionControlRequest")
	proto.RegisterType((*ResetMissionControlResponse)(nil), "routerrpc.ResetMissionControlResponse")
	proto.RegisterType((*QueryMissionControlRequest)(nil), "routerrpc.QueryMissionControlRequest")
	proto.RegisterType((*QueryMissionControlResponse)(nil), "routerrpc.QueryMissionControlResponse")
	proto.RegisterType((*PairHistory)(nil), "routerrpc.PairHistory")
	proto.RegisterType((*PairData)(nil), "routerrpc.PairData")
	proto.RegisterType((*QueryProbabilityRequest)(nil), "routerrpc.QueryProbabilityRequest")
	proto.RegisterType((*QueryProbabilityResponse)(nil), "routerrpc.QueryProbabilityResponse")
	proto.RegisterType((*BuildRouteRequest)(nil), "routerrpc.BuildRouteRequest")
	proto.RegisterType((*BuildRouteResponse)(nil), "routerrpc.BuildRouteResponse")
}

func init() { proto.RegisterFile("v0.9.0/routerrpc/router.proto", fileDescriptor_24ba73bc3a65b061) }

var fileDescriptor_24ba73bc3a65b061 = []byte{
	// 2110 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x58, 0x4b, 0x77, 0xdb, 0xc6,
	0xf5, 0x0f, 0xf8, 0xe6, 0xe5, 0x0b, 0x1a, 0x29, 0x32, 0x4c, 0x59, 0x89, 0x02, 0xfb, 0xef, 0xf0,
	0xf8, 0x38, 0xb2, 0xff, 0x6a, 0xe3, 0xe3, 0x76, 0xd1, 0x1e, 0x8a, 0x04, 0x23, 0xc8, 0x24, 0x28,
	0x0f, 0x49, 0x27, 0x6e, 0x16, 0x73, 0x20, 0x72, 0x24, 0xe2, 0x08, 0x04, 0x18, 0x60, 0xe8, 0x58,
	0x5f, 0xa0, 0xab, 0x7e, 0x8f, 0x76, 0xd3, 0x6e, 0xba, 0xee, 0xd7, 0x69, 0xf7, 0xdd, 0x75, 0xd7,
	0x33, 0x33, 0x00, 0x09, 0x52, 0x94, 0xd3, 0x15, 0x31, 0xbf, 0xfb, 0x9a, 0x99, 0x3b, 0xf7, 0x45,
	0x38, 0xfc, 0xf0, 0xf2, 0xf8, 0x37, 0xc7, 0x2f, 0x5f, 0x04, 0xfe, 0x82, 0xd1, 0x20, 0x98, 0x8f,
	0xa3, 0xaf, 0xe3, 0x79, 0xe0, 0x33, 0x1f, 0x15, 0x97, 0x78, 0xbd, 0x18, 0xcc, 0xc7, 0x12, 0xd5,
	0xff, 0x93, 0x05, 0x34, 0xa0, 0xde, 0xe4, 0xc2, 0xbe, 0x9d, 0x51, 0x8f, 0x61, 0xfa, 0xd3, 0x82,
	0x86, 0x0c, 0x21, 0xc8, 0x4c, 0x68, 0xc8, 0x34, 0xe5, 0x48, 0x69, 0x94, 0xb1, 0xf8, 0x46, 0x2a,
	0xa4, 0xed, 0x19, 0xd3, 0x52, 0x47, 0x4a, 0x23, 0x8d, 0xf9, 0x27, 0x7a, 0x08, 0x05, 0x7b, 0xc6,
	0xc8, 0x2c, 0xb4, 0x99, 0x56, 0x16, 0x70, 0xde, 0x9e, 0xb1, 0x5e, 0x68, 0x33, 0xf4, 0x15, 0x94,
	0xe7, 0x52, 0x25, 0x99, 0xda, 0xe1, 0x54, 0x4b, 0x0b, 0x45, 0xa5, 0x08, 0x3b, 0xb3, 0xc3, 0x29,
	0x6a, 0x80, 0x7a, 0xe5, 0x78, 0xb6, 0x4b, 0xc6, 0x2e, 0xfb, 0x40, 0x26, 0xd4, 0x65, 0xb6, 0x96,
	0x39, 0x52, 0x1a, 0x59, 0x5c, 0x15, 0x78, 0xcb, 0x65, 0x1f, 0xda, 0x1c, 0x45, 0x5f, 0x43, 0x2d,
	0x56, 0x16, 0xc8, 0x0d, 0x6a, 0xd9, 0x23, 0xa5, 0x51, 0xc4, 0xd5, 0xf9, 0xfa, 0xb6, 0xbf, 0x86,
	0x1a, 0x73, 0x66, 0xd4, 0x5f, 0x30, 0x12, 0xd2, 0xb1, 0xef, 0x4d, 0x42, 0x2d, 0x27, 0x35, 0x46,
	0xf0, 0x40, 0xa2, 0x48, 0x87, 0xca, 0x15, 0xa5, 0xc4, 0x75, 0x66, 0x0e, 0x23, 0x7c, 0xfb, 0x79,
	0xb1, 0xfd, 0xd2, 0x15, 0xa5, 0x5d, 0x8e, 0x0d, 0x6c, 0x86, 0x9e, 0x40, 0x75, 0xc5, 0x23, 0xce,
	0x58, 0x11, 0x4c, 0xe5, 0x98, 0x49, 0x1c, 0xf4, 0x39, 0xa8, 0xfe, 0x82, 0x5d, 0xfb, 0x8e, 0x77,
	0x4d, 0xc6, 0x53, 0xdb, 0x23, 0xce, 0x44, 0x2b, 0x1c, 0x29, 0x8d, 0xcc, 0x69, 0xea, 0xa5, 0x82,
	0xab, 0x31, 0xad, 0x35, 0xb5, 0x3d, 0x73, 0x82, 0x9e, 0x42, 0xcd, 0xb5, 0x43, 0x46, 0xa6, 0xfe,
	0x9c, 0xcc, 0x17, 0x97, 0x37, 0xf4, 0x56, 0xab, 0x8a, 0x9b, 0xa9, 0x70, 0xf8, 0xcc, 0x9f, 0x5f,
	0x08, 0x10, 0x1d, 0x02, 0x88, 0x5b, 0x11, 0xc6, 0xb5, 0xa2, 0x38, 0x43, 0x91, 0x23, 0xc2, 0x30,
	0x3a, 0x81, 0x92, 0xf0, 0x26, 0x99, 0x3a, 0x1e, 0x0b, 0x35, 0x38, 0x4a, 0x37, 0x4a, 0x27, 0xea,
	0xb1, 0xeb, 0x71, 0xc7, 0x62, 0x4e, 0x39, 0x73, 0x3c, 0x86, 0x93, 0x4c, 0x68, 0x02, 0xbb, 0xdc,
	0x8d, 0x64, 0xbc, 0x08, 0x99, 0x3f, 0x23, 0x01, 0x1d, 0xfb, 0xc1, 0x24, 0xd4, 0x4a, 0x42, 0xf6,
	0xd7, 0xc7, 0xcb, 0xd7, 0x71, 0x7c, 0xf7, 0x39, 0x1c, 0xb7, 0x69, 0xc8, 0x5a, 0x42, 0x0e, 0x4b,
	0x31, 0xc3, 0x63, 0xc1, 0x2d, 0xde, 0x99, 0x6c, 0xe2, 0xe8, 0x39, 0x20, 0xdb, 0x75, 0xfd, 0x9f,
	0x49, 0x48, 0xdd, 0x2b, 0x12, 0xb9, 0x47, 0xab, 0x1d, 0x29, 0x8d, 0x02, 0x56, 0x05, 0x65, 0x40,
	0xdd, 0xab, 0x48, 0x3d, 0x7a, 0x05, 0x15, 0xb1, 0xa7, 0x2b, 0x6a, 0xb3, 0x45, 0x40, 0x43, 0x4d,
	0x3d, 0x4a, 0x37, 0xaa, 0x27, 0x3b, 0xd1, 0x49, 0x3a, 0x12, 0x3e, 0x75, 0x18, 0x2e, 0x73, 0xbe,
	0x68, 0x1d, 0xd6, 0xdb, 0xb0, 0xbf, 0x7d, 0x4b, 0xfc, 0x91, 0xf2, 0x4b, 0xe5, 0xef, 0x36, 0x83,
	0xf9, 0x27, 0xda, 0x83, 0xec, 0x07, 0xdb, 0x5d, 0x50, 0xf1, 0x70, 0xcb, 0x58, 0x2e, 0x7e, 0x9b,
	0x7a, 0xad, 0xe8, 0xaf, 0x61, 0x77, 0x18, 0xd8, 0xe3, 0x9b, 0x8d, 0xb7, 0xbf, 0xf9, 0x74, 0x95,
	0x3b, 0x4f, 0x57, 0xff, 0x8b, 0x02, 0x95, 0x48, 0x6a, 0xc0, 0x6c, 0xb6, 0x08, 0xd1, 0x37, 0x90,
	0x0d, 0x99, 0xcd, 0xa8, 0xe0, 0xae, 0x9e, 0x3c, 0x48, 0xdc, 0x67, 0x82, 0x91, 0x62, 0xc9, 0x85,
	0xea, 0x50, 0x98, 0x07, 0xd4, 0x99, 0xd9, 0xd7, 0xf1, 0xbe, 0x96, 0x6b, 0xa4, 0x43, 0x56, 0x08,
	0x8b, 0x98, 0x29, 0x9d, 0x94, 0x93, 0x6e, 0xc5, 0x92, 0x84, 0x1a, 0x90, 0x9d, 0x32, 0x77, 0x1c,
	0x6a, 0x19, 0xe1, 0x3e, 0x14, 0xf1, 0x9c, 0x0d, 0xbb, 0xad, 0x26, 0x63, 0x74, 0x36, 0x67, 0x58,
	0x32, 0xe8, 0xbf, 0x83, 0x9a, 0x90, 0xec, 0x50, 0xfa, 0xa9, 0xe0, 0x7e, 0x00, 0x3c, 0x74, 0x45,
	0x28, 0xc8, 0x00, 0xcf, 0xd9, 0x33, 0x1e, 0x05, 0xfa, 0x04, 0xd4, 0x95, 0x7c, 0x38, 0xf7, 0xbd,
	0x90, 0x5b, 0x57, 0xf9, 0x36, 0xf8, 0x93, 0xe7, 0x11, 0x22, 0x62, 0x43, 0x11, 0x52, 0xd5, 0x08,
	0xef, 0x50, 0x2a, 0xa2, 0xe3, 0xa9, 0x0c, 0x48, 0xe2, 0xfa, 0xe3, 0x1b, 0x1e, 0xe2, 0xf6, 0x6d,
	0xa4, 0xbe, 0xc2, 0xe1, 0xae, 0x3f, 0xbe, 0x69, 0x73, 0x50, 0xff, 0x51, 0x66, 0xa1, 0xa1, 0x2f,
	0x4f, 0xf9, 0x3f, 0x7b, 0x62, 0x75, 0x59, 0xa9, 0x7b, 0x2f, 0x4b, 0x27, 0xb0, 0xbb, 0xa6, 0x3c,
	0x3a, 0x45, 0xd2, 0x07, 0xca, 0x86, 0x0f, 0x9e, 0x43, 0xfe, 0xca, 0x76, 0xdc, 0x45, 0x10, 0x2b,
	0x46, 0x09, 0x87, 0x76, 0x24, 0x05, 0xc7, 0x2c, 0xfa, 0x1f, 0x0b, 0x90, 0x8f, 0x40, 0x74, 0x02,
	0x99, 0xb1, 0x3f, 0x89, 0xdf, 0xc1, 0x17, 0x77, 0xc5, 0xe2, 0xdf, 0x96, 0x3f, 0xa1, 0x58, 0xf0,
	0xa2, 0xdf, 0x43, 0x95, 0xa7, 0x0e, 0x8f, 0xba, 0x64, 0x31, 0x9f, 0xd8, 0x4b, 0xd7, 0x6b, 0x09,
	0xe9, 0x96, 0x64, 0x18, 0x09, 0x3a, 0xae, 0x8c, 0x93, 0x4b, 0x74, 0x00, 0x45, 0xee, 0x6d, 0xe9,
	0x89, 0x8c, 0x78, 0xfb, 0x05, 0x0e, 0x08, 0x1f, 0xe8, 0x50, 0xf1, 0x3d, 0xc7, 0xf7, 0x48, 0x38,
	0xb5, 0xc9, 0xc9, 0xb7, 0xaf, 0x44, 0xee, 0x2c, 0xe3, 0x92, 0x00, 0x07, 0x53, 0xfb, 0xe4, 0xdb,
	0x57, 0xe8, 0x4b, 0x28, 0x89, 0x7c, 0x43, 0x3f, 0xce, 0x9d, 0xe0, 0x56, 0x24, 0xcd, 0x0a, 0x16,
	0x29, 0xc8, 0x10, 0x08, 0x8f, 0xa2, 0x2b, 0xd7, 0xbe, 0x0e, 0x45, 0xa2, 0xac, 0x60, 0xb9, 0x40,
	0x2f, 0x61, 0x2f, 0xba, 0x03, 0x12, 0xfa, 0x8b, 0x60, 0x4c, 0x89, 0xe3, 0x4d, 0xe8, 0x47, 0x91,
	0x00, 0x2b, 0x18, 0x45, 0xb4, 0x81, 0x20, 0x99, 0x9c, 0x82, 0xf6, 0x21, 0x37, 0xa5, 0xce, 0xf5,
	0x54, 0x26, 0xb5, 0x0a, 0x8e, 0x56, 0xfa, 0x3f, 0xb2, 0x50, 0x4a, 0x5c, 0x0c, 0x2a, 0x43, 0x01,
	0x1b, 0x03, 0x03, 0xbf, 0x33, 0xda, 0xea, 0x67, 0xa8, 0x01, 0x4f, 0x4c, 0xab, 0xd5, 0xc7, 0xd8,
	0x68, 0x0d, 0x49, 0x1f, 0x93, 0x91, 0xf5, 0xc6, 0xea, 0x7f, 0x6f, 0x91, 0x8b, 0xe6, 0xfb, 0x9e,
	0x61, 0x0d, 0x49, 0xdb, 0x18, 0x36, 0xcd, 0xee, 0x40, 0x55, 0xd0, 0x23, 0xd0, 0x56, 0x9c, 0x31,
	0xb9, 0xd9, 0xeb, 0x8f, 0xac, 0xa1, 0x9a, 0x42, 0x5f, 0xc2, 0x41, 0xc7, 0xb4, 0x9a, 0x5d, 0xb2,
	0xe2, 0x69, 0x75, 0x87, 0xef, 0x88, 0xf1, 0xc3, 0x85, 0x89, 0xdf, 0xab, 0xe9, 0x6d, 0x0c, 0x3c,
	0xa6, 0x62, 0x0d, 0x19, 0xf4, 0x10, 0x3e, 0x97, 0x0c, 0x52, 0x84, 0x0c, 0xfb, 0x7d, 0x32, 0xe8,
	0xf7, 0x2d, 0x35, 0x8b, 0x76, 0xa0, 0x62, 0x5a, 0xef, 0x9a, 0x5d, 0xb3, 0x4d, 0xb0, 0xd1, 0xec,
	0xf6, 0xd4, 0x1c, 0xda, 0x85, 0xda, 0x26, 0x5f, 0x9e, 0xab, 0x88, 0xf9, 0xfa, 0x96, 0xd9, 0xb7,
	0xc8, 0x3b, 0x03, 0x0f, 0xcc, 0xbe, 0xa5, 0x16, 0xd0, 0x3e, 0xa0, 0x75, 0xd2, 0x59, 0xaf, 0xd9,
	0x52, 0x8b, 0xe8, 0x73, 0xd8, 0x59, 0xc7, 0xdf, 0x18, 0xef, 0x55, 0x40, 0x1a, 0xec, 0xc9, 0x8d,
	0x91, 0x53, 0xa3, 0xdb, 0xff, 0x9e, 0xf4, 0x4c, 0xcb, 0xec, 0x8d, 0x7a, 0x6a, 0x09, 0xed, 0x81,
	0xda, 0x31, 0x0c, 0x62, 0x5a, 0x83, 0x51, 0xa7, 0x63, 0xb6, 0x4c, 0xc3, 0x1a, 0xaa, 0x65, 0x69,
	0x79, 0xdb, 0xc1, 0x2b, 0x5c, 0xa0, 0x75, 0xd6, 0xb4, 0x2c, 0xa3, 0x4b, 0xda, 0xe6, 0xa0, 0x79,
	0xda, 0x35, 0xda, 0x6a, 0x15, 0x1d, 0xc2, 0xc3, 0xa1, 0xd1, 0xbb, 0xe8, 0xe3, 0x26, 0x7e, 0x4f,
	0x62, 0x7a, 0xa7, 0x69, 0x76, 0x47, 0xd8, 0x50, 0x6b, 0xe8, 0x2b, 0x38, 0xc4, 0xc6, 0xdb, 0x91,
	0x89, 0x8d, 0x36, 0xb1, 0xfa, 0x6d, 0x83, 0x74, 0x8c, 0xe6, 0x70, 0x84, 0x0d, 0xd2, 0x33, 0x07,
	0x03, 0xd3, 0xfa, 0x4e, 0x55, 0xd1, 0x13, 0x38, 0x5a, 0xb2, 0x2c, 0x15, 0x6c, 0x70, 0xed, 0xf0,
	0xf3, 0xc5, 0x2e, 0xb5, 0x8c, 0x1f, 0x86, 0xe4, 0xc2, 0x30, 0xb0, 0x8a, 0x50, 0x1d, 0xf6, 0x57,
	0xe6, 0xa5, 0x81, 0xc8, 0xf6, 0x2e, 0xa7, 0x5d, 0x18, 0xb8, 0xd7, 0xb4, 0xb8, 0x83, 0xd7, 0x68,
	0x7b, 0x7c, 0xdb, 0x2b, 0xda, 0xe6, 0xb6, 0x3f, 0x47, 0x08, 0xaa, 0x09, 0xaf, 0x74, 0x9a, 0x58,
	0xdd, 0x47, 0x35, 0x28, 0xf5, 0x2e, 0x2e, 0xc8, 0xd0, 0xec, 0x19, 0xfd, 0xd1, 0x50, 0x7d, 0x80,
	0xf6, 0xa0, 0x16, 0x6f, 0x29, 0x96, 0xfc, 0x67, 0x1e, 0x3d, 0x00, 0x34, 0xb2, 0xb0, 0xd1, 0x6c,
	0xf3, 0x1b, 0x5a, 0x12, 0xfe, 0x95, 0x3f, 0xcf, 0x14, 0x52, 0x6a, 0x5a, 0xff, 0x7b, 0x1a, 0x2a,
	0x6b, 0x81, 0x8a, 0x1e, 0x41, 0x31, 0x74, 0xae, 0x3d, 0x51, 0xb7, 0xa2, 0x2c, 0xb3, 0x02, 0x44,
	0x99, 0x9f, 0xda, 0x8e, 0x27, 0xd3, 0x9b, 0x2c, 0x04, 0x45, 0x81, 0x88, 0xe4, 0x76, 0x00, 0xf9,
	0xb8, 0xa5, 0x48, 0x2f, 0x5b, 0x8a, 0xdc, 0x58, 0xb6, 0x12, 0x8f, 0xa0, 0xc8, 0x73, 0x68, 0xc8,
	0xec, 0xd9, 0x5c, 0xc4, 0x7c, 0x05, 0xaf, 0x00, 0xf4, 0x18, 0x2a, 0x33, 0x1a, 0x86, 0xf6, 0x35,
	0x25, 0x32, 0x6e, 0x41, 0x70, 0x94, 0x23, 0xb0, 0x23, 0xc2, 0xf7, 0x31, 0xc4, 0x79, 0x24, 0x62,
	0xca, 0x4a, 0xa6, 0x08, 0x94, 0x4c, 0x9b, 0x29, 0x9c, 0xd9, 0x51, 0x7a, 0x48, 0xa6, 0x70, 0x66,
	0xa3, 0x67, 0xb0, 0x23, 0x73, 0x90, 0xe3, 0x39, 0xb3, 0xc5, 0x4c, 0xe6, 0xa2, 0xbc, 0xc8, 0x45,
	0x35, 0x91, 0x8b, 0x24, 0x2e, 0x52, 0xd2, 0x43, 0x28, 0x5c, 0xda, 0x21, 0xe5, 0xd5, 0x23, 0xca,
	0x15, 0x79, 0xbe, 0xee, 0x50, 0xca, 0x49, 0xbc, 0xa6, 0x04, 0x3c, 0x0b, 0xca, 0x14, 0x91, 0xbf,
	0xa2, 0x14, 0xf3, 0xbb, 0x5c, 0x5a, 0xb0, 0x3f, 0xae, 0x2c, 0x94, 0x12, 0x16, 0x24, 0x2e, 0x2c,
	0x3c, 0x83, 0x1d, 0xfa, 0x91, 0x05, 0x36, 0xf1, 0xe7, 0xf6, 0x4f, 0x0b, 0x4a, 0x26, 0x36, 0xb3,
	0x45, 0x8f, 0x5a, 0xc6, 0x35, 0x41, 0xe8, 0x0b, 0xbc, 0x6d, 0x33, 0x5b, 0x7f, 0x04, 0x75, 0x4c,
	0x43, 0xca, 0x7a, 0x4e, 0x18, 0x3a, 0xbe, 0xd7, 0xf2, 0x3d, 0x16, 0xf8, 0x6e, 0x54, 0x84, 0xf4,
	0x43, 0x38, 0xd8, 0x4a, 0x95, 0x55, 0x84, 0x0b, 0xbf, 0x5d, 0xd0, 0xe0, 0x76, 0xbb, 0xf0, 0x5b,
	0x38, 0xd8, 0x4a, 0x8d, 0x4a, 0xd0, 0x73, 0xc8, 0xce, 0x6d, 0x27, 0x08, 0xb5, 0x94, 0x28, 0xe3,
	0xfb, 0x6b, 0x5d, 0x83, 0x13, 0x9c, 0x39, 0x21, 0xf3, 0x83, 0x5b, 0x2c, 0x99, 0xce, 0x33, 0x05,
	0x45, 0x4d, 0xe9, 0x7f, 0x52, 0xa0, 0x94, 0x20, 0xf2, 0x77, 0xe0, 0xf9, 0x13, 0x4a, 0xae, 0x02,
	0x7f, 0x16, 0xbf, 0xb0, 0x25, 0x80, 0x34, 0xc8, 0x8b, 0x05, 0xf3, 0xa3, 0xe7, 0x15, 0x2f, 0xd1,
	0x37, 0x90, 0x9f, 0x4a, 0x15, 0xc2, 0x4b, 0xa5, 0x93, 0xdd, 0x0d, 0xeb, 0xfc, 0x6e, 0x70, 0xcc,
	0x73, 0x9e, 0x29, 0xa4, 0xd5, 0xcc, 0x79, 0xa6, 0x90, 0x51, 0xb3, 0xe7, 0x99, 0x42, 0x56, 0xcd,
	0x9d, 0x67, 0x0a, 0x39, 0x35, 0xaf, 0xff, 0x5b, 0x81, 0x42, 0xcc, 0xcd, 0xf7, 0xc2, 0x73, 0x3e,
	0xe1, 0x2f, 0x23, 0xea, 0x08, 0x56, 0x00, 0xd2, 0xa1, 0x2c, 0x16, 0xeb, 0x8d, 0xc6, 0x1a, 0x86,
	0x9e, 0x40, 0x65, 0xb9, 0x5e, 0x56, 0xb3, 0x34, 0x5e, 0x07, 0xb9, 0xa6, 0x70, 0x31, 0x1e, 0xd3,
	0x30, 0x94, 0xa6, 0xb2, 0x52, 0x53, 0x12, 0x43, 0x0d, 0xa8, 0xc5, 0xeb, 0xd8, 0x60, 0x4e, 0xb0,
	0x6d, 0xc2, 0xe8, 0x19, 0xa8, 0x49, 0x68, 0xb6, 0x9a, 0x07, 0xee, 0xe0, 0xf2, 0x1a, 0xf4, 0x19,
	0x3c, 0x10, 0x6e, 0xbd, 0x08, 0xfc, 0x4b, 0xfb, 0xd2, 0x71, 0x1d, 0x76, 0x1b, 0xf7, 0x2c, 0xfc,
	0x0a, 0x02, 0x7f, 0x46, 0xbc, 0xb8, 0x09, 0x28, 0xe3, 0x15, 0xc0, 0xdd, 0xc1, 0x7c, 0x49, 0x8b,
	0xdc, 0x11, 0x2d, 0x79, 0x37, 0xb2, 0x34, 0x9e, 0x16, 0xc6, 0x97, 0x6b, 0xfd, 0x06, 0xb4, 0xbb,
	0xe6, 0xa2, 0x27, 0x74, 0x04, 0xa5, 0xf9, 0x0a, 0x16, 0x16, 0x15, 0x9c, 0x84, 0x92, 0x8e, 0x4e,
	0xfd, 0xb2, 0xa3, 0xf5, 0x3f, 0x2b, 0xb0, 0x73, 0xba, 0x70, 0xdc, 0xc9, 0x5a, 0x2b, 0x96, 0x1c,
	0xf5, 0x94, 0xf5, 0x51, 0x6f, 0xdb, 0x1c, 0x97, 0xda, 0x3a, 0xc7, 0x6d, 0x9b, 0x95, 0xd2, 0xf7,
	0xce, 0x4a, 0x5f, 0x42, 0x69, 0x35, 0x26, 0xc9, 0x4e, 0xb7, 0x8c, 0x61, 0x1a, 0xcf, 0x48, 0xa1,
	0xfe, 0x1a, 0x50, 0x72, 0xa3, 0xd1, 0x85, 0x2c, 0x3b, 0x42, 0xe5, 0xde, 0x8e, 0xf0, 0xd9, 0xdf,
	0x14, 0x28, 0x27, 0xdb, 0x72, 0x54, 0x81, 0xa2, 0x69, 0x91, 0x4e, 0xd7, 0xfc, 0xee, 0x6c, 0xa8,
	0x7e, 0xc6, 0x97, 0x83, 0x51, 0xab, 0x65, 0x18, 0x6d, 0xa3, 0xad, 0x2a, 0xbc, 0x60, 0xf0, 0x54,
	0x6f, 0xb4, 0x97, 0xf5, 0x21, 0xc5, 0x4b, 0x7b, 0x84, 0x59, 0x7d, 0x82, 0xfb, 0xa3, 0xa1, 0xa1,
	0xa6, 0x91, 0x0a, 0xe5, 0x08, 0x34, 0x30, 0xee, 0x63, 0x35, 0xc3, 0xeb, 0x5f, 0x84, 0xdc, 0x6d,
	0x4b, 0xe2, 0xae, 0x25, 0x2b, 0xda, 0x8e, 0x98, 0x6b, 0x55, 0xb1, 0xc9, 0x69, 0xb3, 0xdb, 0xb4,
	0x5a, 0x86, 0x9a, 0x3b, 0xf9, 0x6b, 0x16, 0x72, 0xe2, 0x04, 0x01, 0x3a, 0x83, 0x52, 0x62, 0x42,
	0x43, 0x87, 0x9f, 0x9c, 0xdc, 0xea, 0xda, 0xf6, 0x41, 0x64, 0x11, 0xbe, 0x54, 0xd0, 0x39, 0x94,
	0x93, 0xf3, 0x0f, 0x4a, 0x36, 0xab, 0x5b, 0x06, 0xa3, 0x4f, 0xea, 0x7a, 0x03, 0xaa, 0x11, 0x32,
	0x67, 0xc6, 0x9b, 0xd3, 0x68, 0x5c, 0x40, 0xf5, 0x04, 0xff, 0xc6, 0x0c, 0x52, 0x3f, 0xd8, 0x4a,
	0x8b, 0x5c, 0xd8, 0x95, 0x47, 0x8c, 0x1a, 0xf6, 0x3b, 0x47, 0x5c, 0x9f, 0x12, 0xea, 0x5f, 0xdc,
	0x47, 0x8e, 0xb4, 0x4d, 0x60, 0x77, 0x4b, 0x02, 0x47, 0xff, 0x97, 0xdc, 0xc1, 0xbd, 0xe9, 0xbf,
	0xfe, 0xf4, 0x97, 0xd8, 0x56, 0x56, 0xb6, 0x64, 0xfa, 0x35, 0x2b, 0xf7, 0xd7, 0x89, 0x35, 0x2b,
	0x9f, 0x2a, 0x18, 0x3f, 0x82, 0xba, 0x99, 0x09, 0x90, 0xbe, 0x29, 0x7b, 0x37, 0x2b, 0xd5, 0x1f,
	0x7f, 0x92, 0x27, 0x52, 0x6e, 0x02, 0xac, 0xe2, 0x09, 0x3d, 0x4a, 0x88, 0xdc, 0xc9, 0x07, 0xf5,
	0xc3, 0x7b, 0xa8, 0x52, 0xd5, 0xe9, 0xff, 0xff, 0xe1, 0xc5, 0xb5, 0xc3, 0xa6, 0x8b, 0xcb, 0xe3,
	0xb1, 0x3f, 0x7b, 0xe1, 0xf2, 0x16, 0xdf, 0x73, 0xbc, 0x6b, 0x8f, 0xb2, 0x9f, 0xfd, 0xe0, 0xe6,
	0x85, 0xeb, 0x4d, 0x5e, 0x88, 0xb0, 0x5c, 0xfd, 0x59, 0x75, 0x99, 0x13, 0x7f, 0x48, 0xfd, 0xea,
	0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x50, 0x98, 0xab, 0x04, 0xc7, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouterClient interface {
	//*
	//SendPayment attempts to route a payment described by the passed
	//PaymentRequest to the final destination. The call returns a stream of
	//payment status updates.
	SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (Router_SendPaymentClient, error)
	//*
	//TrackPayment returns an update stream for the payment identified by the
	//payment hash.
	TrackPayment(ctx context.Context, in *TrackPaymentRequest, opts ...grpc.CallOption) (Router_TrackPaymentClient, error)
	//*
	//EstimateRouteFee allows callers to obtain a lower bound w.r.t how much it
	//may cost to send an HTLC to the target end destination.
	EstimateRouteFee(ctx context.Context, in *RouteFeeRequest, opts ...grpc.CallOption) (*RouteFeeResponse, error)
	//*
	//SendToRoute attempts to make a payment via the specified route. This method
	//differs from SendPayment in that it allows users to specify a full route
	//manually. This can be used for things like rebalancing, and atomic swaps.
	SendToRoute(ctx context.Context, in *SendToRouteRequest, opts ...grpc.CallOption) (*SendToRouteResponse, error)
	//*
	//ResetMissionControl clears all mission control state and starts with a clean
	//slate.
	ResetMissionControl(ctx context.Context, in *ResetMissionControlRequest, opts ...grpc.CallOption) (*ResetMissionControlResponse, error)
	//*
	//QueryMissionControl exposes the internal mission control state to callers.
	//It is a development feature.
	QueryMissionControl(ctx context.Context, in *QueryMissionControlRequest, opts ...grpc.CallOption) (*QueryMissionControlResponse, error)
	//*
	//QueryProbability returns the current success probability estimate for a
	//given node pair and amount.
	QueryProbability(ctx context.Context, in *QueryProbabilityRequest, opts ...grpc.CallOption) (*QueryProbabilityResponse, error)
	//*
	//BuildRoute builds a fully specified route based on a list of hop public
	//keys. It retrieves the relevant channel policies from the graph in order to
	//calculate the correct fees and time locks.
	BuildRoute(ctx context.Context, in *BuildRouteRequest, opts ...grpc.CallOption) (*BuildRouteResponse, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (Router_SendPaymentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[0], "/routerrpc.Router/SendPayment", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerSendPaymentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Router_SendPaymentClient interface {
	Recv() (*PaymentStatus, error)
	grpc.ClientStream
}

type routerSendPaymentClient struct {
	grpc.ClientStream
}

func (x *routerSendPaymentClient) Recv() (*PaymentStatus, error) {
	m := new(PaymentStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) TrackPayment(ctx context.Context, in *TrackPaymentRequest, opts ...grpc.CallOption) (Router_TrackPaymentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[1], "/routerrpc.Router/TrackPayment", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerTrackPaymentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Router_TrackPaymentClient interface {
	Recv() (*PaymentStatus, error)
	grpc.ClientStream
}

type routerTrackPaymentClient struct {
	grpc.ClientStream
}

func (x *routerTrackPaymentClient) Recv() (*PaymentStatus, error) {
	m := new(PaymentStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) EstimateRouteFee(ctx context.Context, in *RouteFeeRequest, opts ...grpc.CallOption) (*RouteFeeResponse, error) {
	out := new(RouteFeeResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/EstimateRouteFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) SendToRoute(ctx context.Context, in *SendToRouteRequest, opts ...grpc.CallOption) (*SendToRouteResponse, error) {
	out := new(SendToRouteResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/SendToRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) ResetMissionControl(ctx context.Context, in *ResetMissionControlRequest, opts ...grpc.CallOption) (*ResetMissionControlResponse, error) {
	out := new(ResetMissionControlResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/ResetMissionControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) QueryMissionControl(ctx context.Context, in *QueryMissionControlRequest, opts ...grpc.CallOption) (*QueryMissionControlResponse, error) {
	out := new(QueryMissionControlResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/QueryMissionControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) QueryProbability(ctx context.Context, in *QueryProbabilityRequest, opts ...grpc.CallOption) (*QueryProbabilityResponse, error) {
	out := new(QueryProbabilityResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/QueryProbability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) BuildRoute(ctx context.Context, in *BuildRouteRequest, opts ...grpc.CallOption) (*BuildRouteResponse, error) {
	out := new(BuildRouteResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/BuildRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterServer is the server API for Router service.
type RouterServer interface {
	//*
	//SendPayment attempts to route a payment described by the passed
	//PaymentRequest to the final destination. The call returns a stream of
	//payment status updates.
	SendPayment(*SendPaymentRequest, Router_SendPaymentServer) error
	//*
	//TrackPayment returns an update stream for the payment identified by the
	//payment hash.
	TrackPayment(*TrackPaymentRequest, Router_TrackPaymentServer) error
	//*
	//EstimateRouteFee allows callers to obtain a lower bound w.r.t how much it
	//may cost to send an HTLC to the target end destination.
	EstimateRouteFee(context.Context, *RouteFeeRequest) (*RouteFeeResponse, error)
	//*
	//SendToRoute attempts to make a payment via the specified route. This method
	//differs from SendPayment in that it allows users to specify a full route
	//manually. This can be used for things like rebalancing, and atomic swaps.
	SendToRoute(context.Context, *SendToRouteRequest) (*SendToRouteResponse, error)
	//*
	//ResetMissionControl clears all mission control state and starts with a clean
	//slate.
	ResetMissionControl(context.Context, *ResetMissionControlRequest) (*ResetMissionControlResponse, error)
	//*
	//QueryMissionControl exposes the internal mission control state to callers.
	//It is a development feature.
	QueryMissionControl(context.Context, *QueryMissionControlRequest) (*QueryMissionControlResponse, error)
	//*
	//QueryProbability returns the current success probability estimate for a
	//given node pair and amount.
	QueryProbability(context.Context, *QueryProbabilityRequest) (*QueryProbabilityResponse, error)
	//*
	//BuildRoute builds a fully specified route based on a list of hop public
	//keys. It retrieves the relevant channel policies from the graph in order to
	//calculate the correct fees and time locks.
	BuildRoute(context.Context, *BuildRouteRequest) (*BuildRouteResponse, error)
}

// UnimplementedRouterServer can be embedded to have forward compatible implementations.
type UnimplementedRouterServer struct {
}

func (*UnimplementedRouterServer) SendPayment(req *SendPaymentRequest, srv Router_SendPaymentServer) error {
	return status.Errorf(codes.Unimplemented, "method SendPayment not implemented")
}
func (*UnimplementedRouterServer) TrackPayment(req *TrackPaymentRequest, srv Router_TrackPaymentServer) error {
	return status.Errorf(codes.Unimplemented, "method TrackPayment not implemented")
}
func (*UnimplementedRouterServer) EstimateRouteFee(ctx context.Context, req *RouteFeeRequest) (*RouteFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateRouteFee not implemented")
}
func (*UnimplementedRouterServer) SendToRoute(ctx context.Context, req *SendToRouteRequest) (*SendToRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToRoute not implemented")
}
func (*UnimplementedRouterServer) ResetMissionControl(ctx context.Context, req *ResetMissionControlRequest) (*ResetMissionControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetMissionControl not implemented")
}
func (*UnimplementedRouterServer) QueryMissionControl(ctx context.Context, req *QueryMissionControlRequest) (*QueryMissionControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMissionControl not implemented")
}
func (*UnimplementedRouterServer) QueryProbability(ctx context.Context, req *QueryProbabilityRequest) (*QueryProbabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProbability not implemented")
}
func (*UnimplementedRouterServer) BuildRoute(ctx context.Context, req *BuildRouteRequest) (*BuildRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildRoute not implemented")
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_SendPayment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendPaymentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouterServer).SendPayment(m, &routerSendPaymentServer{stream})
}

type Router_SendPaymentServer interface {
	Send(*PaymentStatus) error
	grpc.ServerStream
}

type routerSendPaymentServer struct {
	grpc.ServerStream
}

func (x *routerSendPaymentServer) Send(m *PaymentStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _Router_TrackPayment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrackPaymentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouterServer).TrackPayment(m, &routerTrackPaymentServer{stream})
}

type Router_TrackPaymentServer interface {
	Send(*PaymentStatus) error
	grpc.ServerStream
}

type routerTrackPaymentServer struct {
	grpc.ServerStream
}

func (x *routerTrackPaymentServer) Send(m *PaymentStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _Router_EstimateRouteFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).EstimateRouteFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/EstimateRouteFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).EstimateRouteFee(ctx, req.(*RouteFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_SendToRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendToRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).SendToRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/SendToRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).SendToRoute(ctx, req.(*SendToRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_ResetMissionControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetMissionControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).ResetMissionControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/ResetMissionControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).ResetMissionControl(ctx, req.(*ResetMissionControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_QueryMissionControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMissionControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).QueryMissionControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/QueryMissionControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).QueryMissionControl(ctx, req.(*QueryMissionControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_QueryProbability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProbabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).QueryProbability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/QueryProbability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).QueryProbability(ctx, req.(*QueryProbabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_BuildRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).BuildRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/BuildRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).BuildRoute(ctx, req.(*BuildRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerrpc.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EstimateRouteFee",
			Handler:    _Router_EstimateRouteFee_Handler,
		},
		{
			MethodName: "SendToRoute",
			Handler:    _Router_SendToRoute_Handler,
		},
		{
			MethodName: "ResetMissionControl",
			Handler:    _Router_ResetMissionControl_Handler,
		},
		{
			MethodName: "QueryMissionControl",
			Handler:    _Router_QueryMissionControl_Handler,
		},
		{
			MethodName: "QueryProbability",
			Handler:    _Router_QueryProbability_Handler,
		},
		{
			MethodName: "BuildRoute",
			Handler:    _Router_BuildRoute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendPayment",
			Handler:       _Router_SendPayment_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TrackPayment",
			Handler:       _Router_TrackPayment_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v0.9.0/routerrpc/router.proto",
}
