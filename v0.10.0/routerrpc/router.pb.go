// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v0.10.0/routerrpc/router.proto

package routerrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	lnrpc "github.com/lncm/lnd-rpc/v0.10.0/lnrpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FailureDetail int32

const (
	FailureDetail_UNKNOWN                 FailureDetail = 0
	FailureDetail_NO_DETAIL               FailureDetail = 1
	FailureDetail_ONION_DECODE            FailureDetail = 2
	FailureDetail_LINK_NOT_ELIGIBLE       FailureDetail = 3
	FailureDetail_ON_CHAIN_TIMEOUT        FailureDetail = 4
	FailureDetail_HTLC_EXCEEDS_MAX        FailureDetail = 5
	FailureDetail_INSUFFICIENT_BALANCE    FailureDetail = 6
	FailureDetail_INCOMPLETE_FORWARD      FailureDetail = 7
	FailureDetail_HTLC_ADD_FAILED         FailureDetail = 8
	FailureDetail_FORWARDS_DISABLED       FailureDetail = 9
	FailureDetail_INVOICE_CANCELED        FailureDetail = 10
	FailureDetail_INVOICE_UNDERPAID       FailureDetail = 11
	FailureDetail_INVOICE_EXPIRY_TOO_SOON FailureDetail = 12
	FailureDetail_INVOICE_NOT_OPEN        FailureDetail = 13
	FailureDetail_MPP_INVOICE_TIMEOUT     FailureDetail = 14
	FailureDetail_ADDRESS_MISMATCH        FailureDetail = 15
	FailureDetail_SET_TOTAL_MISMATCH      FailureDetail = 16
	FailureDetail_SET_TOTAL_TOO_LOW       FailureDetail = 17
	FailureDetail_SET_OVERPAID            FailureDetail = 18
	FailureDetail_UNKNOWN_INVOICE         FailureDetail = 19
	FailureDetail_INVALID_KEYSEND         FailureDetail = 20
	FailureDetail_MPP_IN_PROGRESS         FailureDetail = 21
	FailureDetail_CIRCULAR_ROUTE          FailureDetail = 22
)

var FailureDetail_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "NO_DETAIL",
	2:  "ONION_DECODE",
	3:  "LINK_NOT_ELIGIBLE",
	4:  "ON_CHAIN_TIMEOUT",
	5:  "HTLC_EXCEEDS_MAX",
	6:  "INSUFFICIENT_BALANCE",
	7:  "INCOMPLETE_FORWARD",
	8:  "HTLC_ADD_FAILED",
	9:  "FORWARDS_DISABLED",
	10: "INVOICE_CANCELED",
	11: "INVOICE_UNDERPAID",
	12: "INVOICE_EXPIRY_TOO_SOON",
	13: "INVOICE_NOT_OPEN",
	14: "MPP_INVOICE_TIMEOUT",
	15: "ADDRESS_MISMATCH",
	16: "SET_TOTAL_MISMATCH",
	17: "SET_TOTAL_TOO_LOW",
	18: "SET_OVERPAID",
	19: "UNKNOWN_INVOICE",
	20: "INVALID_KEYSEND",
	21: "MPP_IN_PROGRESS",
	22: "CIRCULAR_ROUTE",
}

var FailureDetail_value = map[string]int32{
	"UNKNOWN":                 0,
	"NO_DETAIL":               1,
	"ONION_DECODE":            2,
	"LINK_NOT_ELIGIBLE":       3,
	"ON_CHAIN_TIMEOUT":        4,
	"HTLC_EXCEEDS_MAX":        5,
	"INSUFFICIENT_BALANCE":    6,
	"INCOMPLETE_FORWARD":      7,
	"HTLC_ADD_FAILED":         8,
	"FORWARDS_DISABLED":       9,
	"INVOICE_CANCELED":        10,
	"INVOICE_UNDERPAID":       11,
	"INVOICE_EXPIRY_TOO_SOON": 12,
	"INVOICE_NOT_OPEN":        13,
	"MPP_INVOICE_TIMEOUT":     14,
	"ADDRESS_MISMATCH":        15,
	"SET_TOTAL_MISMATCH":      16,
	"SET_TOTAL_TOO_LOW":       17,
	"SET_OVERPAID":            18,
	"UNKNOWN_INVOICE":         19,
	"INVALID_KEYSEND":         20,
	"MPP_IN_PROGRESS":         21,
	"CIRCULAR_ROUTE":          22,
}

func (x FailureDetail) String() string {
	return proto.EnumName(FailureDetail_name, int32(x))
}

func (FailureDetail) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{0}
}

type PaymentState int32

const (
	//*
	//Payment is still in flight.
	PaymentState_IN_FLIGHT PaymentState = 0
	//*
	//Payment completed successfully.
	PaymentState_SUCCEEDED PaymentState = 1
	//*
	//There are more routes to try, but the payment timeout was exceeded.
	PaymentState_FAILED_TIMEOUT PaymentState = 2
	//*
	//All possible routes were tried and failed permanently. Or were no
	//routes to the destination at all.
	PaymentState_FAILED_NO_ROUTE PaymentState = 3
	//*
	//A non-recoverable error has occured.
	PaymentState_FAILED_ERROR PaymentState = 4
	//*
	//Payment details incorrect (unknown hash, invalid amt or
	//invalid final cltv delta)
	PaymentState_FAILED_INCORRECT_PAYMENT_DETAILS PaymentState = 5
	//*
	//Insufficient local balance.
	PaymentState_FAILED_INSUFFICIENT_BALANCE PaymentState = 6
)

var PaymentState_name = map[int32]string{
	0: "IN_FLIGHT",
	1: "SUCCEEDED",
	2: "FAILED_TIMEOUT",
	3: "FAILED_NO_ROUTE",
	4: "FAILED_ERROR",
	5: "FAILED_INCORRECT_PAYMENT_DETAILS",
	6: "FAILED_INSUFFICIENT_BALANCE",
}

var PaymentState_value = map[string]int32{
	"IN_FLIGHT":                        0,
	"SUCCEEDED":                        1,
	"FAILED_TIMEOUT":                   2,
	"FAILED_NO_ROUTE":                  3,
	"FAILED_ERROR":                     4,
	"FAILED_INCORRECT_PAYMENT_DETAILS": 5,
	"FAILED_INSUFFICIENT_BALANCE":      6,
}

func (x PaymentState) String() string {
	return proto.EnumName(PaymentState_name, int32(x))
}

func (PaymentState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{1}
}

type HtlcEvent_EventType int32

const (
	HtlcEvent_UNKNOWN HtlcEvent_EventType = 0
	HtlcEvent_SEND    HtlcEvent_EventType = 1
	HtlcEvent_RECEIVE HtlcEvent_EventType = 2
	HtlcEvent_FORWARD HtlcEvent_EventType = 3
)

var HtlcEvent_EventType_name = map[int32]string{
	0: "UNKNOWN",
	1: "SEND",
	2: "RECEIVE",
	3: "FORWARD",
}

var HtlcEvent_EventType_value = map[string]int32{
	"UNKNOWN": 0,
	"SEND":    1,
	"RECEIVE": 2,
	"FORWARD": 3,
}

func (x HtlcEvent_EventType) String() string {
	return proto.EnumName(HtlcEvent_EventType_name, int32(x))
}

func (HtlcEvent_EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{17, 0}
}

type SendPaymentRequest struct {
	/// The identity pubkey of the payment recipient
	Dest []byte `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	//*
	//Number of satoshis to send.
	//
	//The fields amt and amt_msat are mutually exclusive.
	Amt int64 `protobuf:"varint,2,opt,name=amt,proto3" json:"amt,omitempty"`
	//*
	//Number of millisatoshis to send.
	//
	//The fields amt and amt_msat are mutually exclusive.
	AmtMsat int64 `protobuf:"varint,12,opt,name=amt_msat,json=amtMsat,proto3" json:"amt_msat,omitempty"`
	/// The hash to use within the payment's HTLC
	PaymentHash []byte `protobuf:"bytes,3,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	//*
	//The CLTV delta from the current height that should be used to set the
	//timelock for the final hop.
	FinalCltvDelta int32 `protobuf:"varint,4,opt,name=final_cltv_delta,json=finalCltvDelta,proto3" json:"final_cltv_delta,omitempty"`
	//*
	//A bare-bones invoice for a payment within the Lightning Network.  With the
	//details of the invoice, the sender has all the data necessary to send a
	//payment to the recipient. The amount in the payment request may be zero. In
	//that case it is required to set the amt field as well. If no payment request
	//is specified, the following fields are required: dest, amt and payment_hash.
	PaymentRequest string `protobuf:"bytes,5,opt,name=payment_request,json=paymentRequest,proto3" json:"payment_request,omitempty"`
	//*
	//An upper limit on the amount of time we should spend when attempting to
	//fulfill the payment. This is expressed in seconds. If we cannot make a
	//successful payment within this time frame, an error will be returned.
	//This field must be non-zero.
	TimeoutSeconds int32 `protobuf:"varint,6,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	//*
	//The maximum number of satoshis that will be paid as a fee of the payment.
	//If this field is left to the default value of 0, only zero-fee routes will
	//be considered. This usually means single hop routes connecting directly to
	//the destination. To send the payment without a fee limit, use max int here.
	//
	//The fields fee_limit_sat and fee_limit_msat are mutually exclusive.
	FeeLimitSat int64 `protobuf:"varint,7,opt,name=fee_limit_sat,json=feeLimitSat,proto3" json:"fee_limit_sat,omitempty"`
	//*
	//The maximum number of millisatoshis that will be paid as a fee of the
	//payment. If this field is left to the default value of 0, only zero-fee
	//routes will be considered. This usually means single hop routes connecting
	//directly to the destination. To send the payment without a fee limit, use
	//max int here.
	//
	//The fields fee_limit_sat and fee_limit_msat are mutually exclusive.
	FeeLimitMsat int64 `protobuf:"varint,13,opt,name=fee_limit_msat,json=feeLimitMsat,proto3" json:"fee_limit_msat,omitempty"`
	//*
	//The channel id of the channel that must be taken to the first hop. If zero,
	//any channel may be used.
	OutgoingChanId uint64 `protobuf:"varint,8,opt,name=outgoing_chan_id,json=outgoingChanId,proto3" json:"outgoing_chan_id,omitempty"`
	//*
	//The pubkey of the last hop of the route. If empty, any hop may be used.
	LastHopPubkey []byte `protobuf:"bytes,14,opt,name=last_hop_pubkey,json=lastHopPubkey,proto3" json:"last_hop_pubkey,omitempty"`
	//*
	//An optional maximum total time lock for the route. This should not exceed
	//lnd's `--max-cltv-expiry` setting. If zero, then the value of
	//`--max-cltv-expiry` is enforced.
	CltvLimit int32 `protobuf:"varint,9,opt,name=cltv_limit,json=cltvLimit,proto3" json:"cltv_limit,omitempty"`
	//*
	//Optional route hints to reach the destination through private channels.
	RouteHints []*lnrpc.RouteHint `protobuf:"bytes,10,rep,name=route_hints,json=routeHints,proto3" json:"route_hints,omitempty"`
	//*
	//An optional field that can be used to pass an arbitrary set of TLV records
	//to a peer which understands the new records. This can be used to pass
	//application specific data during the payment attempt. Record types are
	//required to be in the custom range >= 65536. When using REST, the values
	//must be encoded as base64.
	DestCustomRecords map[uint64][]byte `protobuf:"bytes,11,rep,name=dest_custom_records,json=destCustomRecords,proto3" json:"dest_custom_records,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// If set, circular payments to self are permitted.
	AllowSelfPayment bool `protobuf:"varint,15,opt,name=allow_self_payment,json=allowSelfPayment,proto3" json:"allow_self_payment,omitempty"`
	//*
	//Features assumed to be supported by the final node. All transitive feature
	//dependencies must also be set properly. For a given feature bit pair, either
	//optional or remote may be set, but not both. If this field is nil or empty,
	//the router will try to load destination features from the graph as a
	//fallback.
	DestFeatures []lnrpc.FeatureBit `protobuf:"varint,16,rep,packed,name=dest_features,json=destFeatures,proto3,enum=lnrpc.FeatureBit" json:"dest_features,omitempty"`
	//*
	//The maximum number of partial payments that may be use to complete the full
	//amount.
	MaxParts uint32 `protobuf:"varint,17,opt,name=max_parts,json=maxParts,proto3" json:"max_parts,omitempty"`
	//*
	//If set, only the final payment update is streamed back. Intermediate updates
	//that show which htlcs are still in flight are suppressed.
	NoInflightUpdates    bool     `protobuf:"varint,18,opt,name=no_inflight_updates,json=noInflightUpdates,proto3" json:"no_inflight_updates,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendPaymentRequest) Reset()         { *m = SendPaymentRequest{} }
func (m *SendPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*SendPaymentRequest) ProtoMessage()    {}
func (*SendPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{0}
}

func (m *SendPaymentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendPaymentRequest.Unmarshal(m, b)
}
func (m *SendPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendPaymentRequest.Marshal(b, m, deterministic)
}
func (m *SendPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendPaymentRequest.Merge(m, src)
}
func (m *SendPaymentRequest) XXX_Size() int {
	return xxx_messageInfo_SendPaymentRequest.Size(m)
}
func (m *SendPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendPaymentRequest proto.InternalMessageInfo

func (m *SendPaymentRequest) GetDest() []byte {
	if m != nil {
		return m.Dest
	}
	return nil
}

func (m *SendPaymentRequest) GetAmt() int64 {
	if m != nil {
		return m.Amt
	}
	return 0
}

func (m *SendPaymentRequest) GetAmtMsat() int64 {
	if m != nil {
		return m.AmtMsat
	}
	return 0
}

func (m *SendPaymentRequest) GetPaymentHash() []byte {
	if m != nil {
		return m.PaymentHash
	}
	return nil
}

func (m *SendPaymentRequest) GetFinalCltvDelta() int32 {
	if m != nil {
		return m.FinalCltvDelta
	}
	return 0
}

func (m *SendPaymentRequest) GetPaymentRequest() string {
	if m != nil {
		return m.PaymentRequest
	}
	return ""
}

func (m *SendPaymentRequest) GetTimeoutSeconds() int32 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *SendPaymentRequest) GetFeeLimitSat() int64 {
	if m != nil {
		return m.FeeLimitSat
	}
	return 0
}

func (m *SendPaymentRequest) GetFeeLimitMsat() int64 {
	if m != nil {
		return m.FeeLimitMsat
	}
	return 0
}

func (m *SendPaymentRequest) GetOutgoingChanId() uint64 {
	if m != nil {
		return m.OutgoingChanId
	}
	return 0
}

func (m *SendPaymentRequest) GetLastHopPubkey() []byte {
	if m != nil {
		return m.LastHopPubkey
	}
	return nil
}

func (m *SendPaymentRequest) GetCltvLimit() int32 {
	if m != nil {
		return m.CltvLimit
	}
	return 0
}

func (m *SendPaymentRequest) GetRouteHints() []*lnrpc.RouteHint {
	if m != nil {
		return m.RouteHints
	}
	return nil
}

func (m *SendPaymentRequest) GetDestCustomRecords() map[uint64][]byte {
	if m != nil {
		return m.DestCustomRecords
	}
	return nil
}

func (m *SendPaymentRequest) GetAllowSelfPayment() bool {
	if m != nil {
		return m.AllowSelfPayment
	}
	return false
}

func (m *SendPaymentRequest) GetDestFeatures() []lnrpc.FeatureBit {
	if m != nil {
		return m.DestFeatures
	}
	return nil
}

func (m *SendPaymentRequest) GetMaxParts() uint32 {
	if m != nil {
		return m.MaxParts
	}
	return 0
}

func (m *SendPaymentRequest) GetNoInflightUpdates() bool {
	if m != nil {
		return m.NoInflightUpdates
	}
	return false
}

type TrackPaymentRequest struct {
	/// The hash of the payment to look up.
	PaymentHash []byte `protobuf:"bytes,1,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	//*
	//If set, only the final payment update is streamed back. Intermediate updates
	//that show which htlcs are still in flight are suppressed.
	NoInflightUpdates    bool     `protobuf:"varint,2,opt,name=no_inflight_updates,json=noInflightUpdates,proto3" json:"no_inflight_updates,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackPaymentRequest) Reset()         { *m = TrackPaymentRequest{} }
func (m *TrackPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*TrackPaymentRequest) ProtoMessage()    {}
func (*TrackPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{1}
}

func (m *TrackPaymentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackPaymentRequest.Unmarshal(m, b)
}
func (m *TrackPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackPaymentRequest.Marshal(b, m, deterministic)
}
func (m *TrackPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackPaymentRequest.Merge(m, src)
}
func (m *TrackPaymentRequest) XXX_Size() int {
	return xxx_messageInfo_TrackPaymentRequest.Size(m)
}
func (m *TrackPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrackPaymentRequest proto.InternalMessageInfo

func (m *TrackPaymentRequest) GetPaymentHash() []byte {
	if m != nil {
		return m.PaymentHash
	}
	return nil
}

func (m *TrackPaymentRequest) GetNoInflightUpdates() bool {
	if m != nil {
		return m.NoInflightUpdates
	}
	return false
}

type RouteFeeRequest struct {
	//*
	//The destination once wishes to obtain a routing fee quote to.
	Dest []byte `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	//*
	//The amount one wishes to send to the target destination.
	AmtSat               int64    `protobuf:"varint,2,opt,name=amt_sat,json=amtSat,proto3" json:"amt_sat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteFeeRequest) Reset()         { *m = RouteFeeRequest{} }
func (m *RouteFeeRequest) String() string { return proto.CompactTextString(m) }
func (*RouteFeeRequest) ProtoMessage()    {}
func (*RouteFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{2}
}

func (m *RouteFeeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteFeeRequest.Unmarshal(m, b)
}
func (m *RouteFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteFeeRequest.Marshal(b, m, deterministic)
}
func (m *RouteFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteFeeRequest.Merge(m, src)
}
func (m *RouteFeeRequest) XXX_Size() int {
	return xxx_messageInfo_RouteFeeRequest.Size(m)
}
func (m *RouteFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteFeeRequest proto.InternalMessageInfo

func (m *RouteFeeRequest) GetDest() []byte {
	if m != nil {
		return m.Dest
	}
	return nil
}

func (m *RouteFeeRequest) GetAmtSat() int64 {
	if m != nil {
		return m.AmtSat
	}
	return 0
}

type RouteFeeResponse struct {
	//*
	//A lower bound of the estimated fee to the target destination within the
	//network, expressed in milli-satoshis.
	RoutingFeeMsat int64 `protobuf:"varint,1,opt,name=routing_fee_msat,json=routingFeeMsat,proto3" json:"routing_fee_msat,omitempty"`
	//*
	//An estimate of the worst case time delay that can occur. Note that callers
	//will still need to factor in the final CLTV delta of the last hop into this
	//value.
	TimeLockDelay        int64    `protobuf:"varint,2,opt,name=time_lock_delay,json=timeLockDelay,proto3" json:"time_lock_delay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteFeeResponse) Reset()         { *m = RouteFeeResponse{} }
func (m *RouteFeeResponse) String() string { return proto.CompactTextString(m) }
func (*RouteFeeResponse) ProtoMessage()    {}
func (*RouteFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{3}
}

func (m *RouteFeeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteFeeResponse.Unmarshal(m, b)
}
func (m *RouteFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteFeeResponse.Marshal(b, m, deterministic)
}
func (m *RouteFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteFeeResponse.Merge(m, src)
}
func (m *RouteFeeResponse) XXX_Size() int {
	return xxx_messageInfo_RouteFeeResponse.Size(m)
}
func (m *RouteFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteFeeResponse proto.InternalMessageInfo

func (m *RouteFeeResponse) GetRoutingFeeMsat() int64 {
	if m != nil {
		return m.RoutingFeeMsat
	}
	return 0
}

func (m *RouteFeeResponse) GetTimeLockDelay() int64 {
	if m != nil {
		return m.TimeLockDelay
	}
	return 0
}

type SendToRouteRequest struct {
	/// The payment hash to use for the HTLC.
	PaymentHash []byte `protobuf:"bytes,1,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	/// Route that should be used to attempt to complete the payment.
	Route                *lnrpc.Route `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SendToRouteRequest) Reset()         { *m = SendToRouteRequest{} }
func (m *SendToRouteRequest) String() string { return proto.CompactTextString(m) }
func (*SendToRouteRequest) ProtoMessage()    {}
func (*SendToRouteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{4}
}

func (m *SendToRouteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendToRouteRequest.Unmarshal(m, b)
}
func (m *SendToRouteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendToRouteRequest.Marshal(b, m, deterministic)
}
func (m *SendToRouteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendToRouteRequest.Merge(m, src)
}
func (m *SendToRouteRequest) XXX_Size() int {
	return xxx_messageInfo_SendToRouteRequest.Size(m)
}
func (m *SendToRouteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendToRouteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendToRouteRequest proto.InternalMessageInfo

func (m *SendToRouteRequest) GetPaymentHash() []byte {
	if m != nil {
		return m.PaymentHash
	}
	return nil
}

func (m *SendToRouteRequest) GetRoute() *lnrpc.Route {
	if m != nil {
		return m.Route
	}
	return nil
}

type SendToRouteResponse struct {
	/// The preimage obtained by making the payment.
	Preimage []byte `protobuf:"bytes,1,opt,name=preimage,proto3" json:"preimage,omitempty"`
	/// The failure message in case the payment failed.
	Failure              *lnrpc.Failure `protobuf:"bytes,2,opt,name=failure,proto3" json:"failure,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SendToRouteResponse) Reset()         { *m = SendToRouteResponse{} }
func (m *SendToRouteResponse) String() string { return proto.CompactTextString(m) }
func (*SendToRouteResponse) ProtoMessage()    {}
func (*SendToRouteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{5}
}

func (m *SendToRouteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendToRouteResponse.Unmarshal(m, b)
}
func (m *SendToRouteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendToRouteResponse.Marshal(b, m, deterministic)
}
func (m *SendToRouteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendToRouteResponse.Merge(m, src)
}
func (m *SendToRouteResponse) XXX_Size() int {
	return xxx_messageInfo_SendToRouteResponse.Size(m)
}
func (m *SendToRouteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendToRouteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendToRouteResponse proto.InternalMessageInfo

func (m *SendToRouteResponse) GetPreimage() []byte {
	if m != nil {
		return m.Preimage
	}
	return nil
}

func (m *SendToRouteResponse) GetFailure() *lnrpc.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

type ResetMissionControlRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResetMissionControlRequest) Reset()         { *m = ResetMissionControlRequest{} }
func (m *ResetMissionControlRequest) String() string { return proto.CompactTextString(m) }
func (*ResetMissionControlRequest) ProtoMessage()    {}
func (*ResetMissionControlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{6}
}

func (m *ResetMissionControlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResetMissionControlRequest.Unmarshal(m, b)
}
func (m *ResetMissionControlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResetMissionControlRequest.Marshal(b, m, deterministic)
}
func (m *ResetMissionControlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetMissionControlRequest.Merge(m, src)
}
func (m *ResetMissionControlRequest) XXX_Size() int {
	return xxx_messageInfo_ResetMissionControlRequest.Size(m)
}
func (m *ResetMissionControlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetMissionControlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResetMissionControlRequest proto.InternalMessageInfo

type ResetMissionControlResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResetMissionControlResponse) Reset()         { *m = ResetMissionControlResponse{} }
func (m *ResetMissionControlResponse) String() string { return proto.CompactTextString(m) }
func (*ResetMissionControlResponse) ProtoMessage()    {}
func (*ResetMissionControlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{7}
}

func (m *ResetMissionControlResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResetMissionControlResponse.Unmarshal(m, b)
}
func (m *ResetMissionControlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResetMissionControlResponse.Marshal(b, m, deterministic)
}
func (m *ResetMissionControlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetMissionControlResponse.Merge(m, src)
}
func (m *ResetMissionControlResponse) XXX_Size() int {
	return xxx_messageInfo_ResetMissionControlResponse.Size(m)
}
func (m *ResetMissionControlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetMissionControlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResetMissionControlResponse proto.InternalMessageInfo

type QueryMissionControlRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryMissionControlRequest) Reset()         { *m = QueryMissionControlRequest{} }
func (m *QueryMissionControlRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMissionControlRequest) ProtoMessage()    {}
func (*QueryMissionControlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{8}
}

func (m *QueryMissionControlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryMissionControlRequest.Unmarshal(m, b)
}
func (m *QueryMissionControlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryMissionControlRequest.Marshal(b, m, deterministic)
}
func (m *QueryMissionControlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMissionControlRequest.Merge(m, src)
}
func (m *QueryMissionControlRequest) XXX_Size() int {
	return xxx_messageInfo_QueryMissionControlRequest.Size(m)
}
func (m *QueryMissionControlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMissionControlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMissionControlRequest proto.InternalMessageInfo

/// QueryMissionControlResponse contains mission control state.
type QueryMissionControlResponse struct {
	/// Node pair-level mission control state.
	Pairs                []*PairHistory `protobuf:"bytes,2,rep,name=pairs,proto3" json:"pairs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *QueryMissionControlResponse) Reset()         { *m = QueryMissionControlResponse{} }
func (m *QueryMissionControlResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMissionControlResponse) ProtoMessage()    {}
func (*QueryMissionControlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{9}
}

func (m *QueryMissionControlResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryMissionControlResponse.Unmarshal(m, b)
}
func (m *QueryMissionControlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryMissionControlResponse.Marshal(b, m, deterministic)
}
func (m *QueryMissionControlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMissionControlResponse.Merge(m, src)
}
func (m *QueryMissionControlResponse) XXX_Size() int {
	return xxx_messageInfo_QueryMissionControlResponse.Size(m)
}
func (m *QueryMissionControlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMissionControlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMissionControlResponse proto.InternalMessageInfo

func (m *QueryMissionControlResponse) GetPairs() []*PairHistory {
	if m != nil {
		return m.Pairs
	}
	return nil
}

/// PairHistory contains the mission control state for a particular node pair.
type PairHistory struct {
	/// The source node pubkey of the pair.
	NodeFrom []byte `protobuf:"bytes,1,opt,name=node_from,json=nodeFrom,proto3" json:"node_from,omitempty"`
	/// The destination node pubkey of the pair.
	NodeTo               []byte    `protobuf:"bytes,2,opt,name=node_to,json=nodeTo,proto3" json:"node_to,omitempty"`
	History              *PairData `protobuf:"bytes,7,opt,name=history,proto3" json:"history,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PairHistory) Reset()         { *m = PairHistory{} }
func (m *PairHistory) String() string { return proto.CompactTextString(m) }
func (*PairHistory) ProtoMessage()    {}
func (*PairHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{10}
}

func (m *PairHistory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PairHistory.Unmarshal(m, b)
}
func (m *PairHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PairHistory.Marshal(b, m, deterministic)
}
func (m *PairHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairHistory.Merge(m, src)
}
func (m *PairHistory) XXX_Size() int {
	return xxx_messageInfo_PairHistory.Size(m)
}
func (m *PairHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_PairHistory.DiscardUnknown(m)
}

var xxx_messageInfo_PairHistory proto.InternalMessageInfo

func (m *PairHistory) GetNodeFrom() []byte {
	if m != nil {
		return m.NodeFrom
	}
	return nil
}

func (m *PairHistory) GetNodeTo() []byte {
	if m != nil {
		return m.NodeTo
	}
	return nil
}

func (m *PairHistory) GetHistory() *PairData {
	if m != nil {
		return m.History
	}
	return nil
}

type PairData struct {
	/// Time of last failure.
	FailTime int64 `protobuf:"varint,1,opt,name=fail_time,json=failTime,proto3" json:"fail_time,omitempty"`
	//*
	//Lowest amount that failed to forward rounded to whole sats. This may be
	//set to zero if the failure is independent of amount.
	FailAmtSat int64 `protobuf:"varint,2,opt,name=fail_amt_sat,json=failAmtSat,proto3" json:"fail_amt_sat,omitempty"`
	//*
	//Lowest amount that failed to forward in millisats. This may be
	//set to zero if the failure is independent of amount.
	FailAmtMsat int64 `protobuf:"varint,4,opt,name=fail_amt_msat,json=failAmtMsat,proto3" json:"fail_amt_msat,omitempty"`
	/// Time of last success.
	SuccessTime int64 `protobuf:"varint,5,opt,name=success_time,json=successTime,proto3" json:"success_time,omitempty"`
	/// Highest amount that we could successfully forward rounded to whole sats.
	SuccessAmtSat int64 `protobuf:"varint,6,opt,name=success_amt_sat,json=successAmtSat,proto3" json:"success_amt_sat,omitempty"`
	/// Highest amount that we could successfully forward in millisats.
	SuccessAmtMsat       int64    `protobuf:"varint,7,opt,name=success_amt_msat,json=successAmtMsat,proto3" json:"success_amt_msat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PairData) Reset()         { *m = PairData{} }
func (m *PairData) String() string { return proto.CompactTextString(m) }
func (*PairData) ProtoMessage()    {}
func (*PairData) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{11}
}

func (m *PairData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PairData.Unmarshal(m, b)
}
func (m *PairData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PairData.Marshal(b, m, deterministic)
}
func (m *PairData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairData.Merge(m, src)
}
func (m *PairData) XXX_Size() int {
	return xxx_messageInfo_PairData.Size(m)
}
func (m *PairData) XXX_DiscardUnknown() {
	xxx_messageInfo_PairData.DiscardUnknown(m)
}

var xxx_messageInfo_PairData proto.InternalMessageInfo

func (m *PairData) GetFailTime() int64 {
	if m != nil {
		return m.FailTime
	}
	return 0
}

func (m *PairData) GetFailAmtSat() int64 {
	if m != nil {
		return m.FailAmtSat
	}
	return 0
}

func (m *PairData) GetFailAmtMsat() int64 {
	if m != nil {
		return m.FailAmtMsat
	}
	return 0
}

func (m *PairData) GetSuccessTime() int64 {
	if m != nil {
		return m.SuccessTime
	}
	return 0
}

func (m *PairData) GetSuccessAmtSat() int64 {
	if m != nil {
		return m.SuccessAmtSat
	}
	return 0
}

func (m *PairData) GetSuccessAmtMsat() int64 {
	if m != nil {
		return m.SuccessAmtMsat
	}
	return 0
}

type QueryProbabilityRequest struct {
	/// The source node pubkey of the pair.
	FromNode []byte `protobuf:"bytes,1,opt,name=from_node,json=fromNode,proto3" json:"from_node,omitempty"`
	/// The destination node pubkey of the pair.
	ToNode []byte `protobuf:"bytes,2,opt,name=to_node,json=toNode,proto3" json:"to_node,omitempty"`
	/// The amount for which to calculate a probability.
	AmtMsat              int64    `protobuf:"varint,3,opt,name=amt_msat,json=amtMsat,proto3" json:"amt_msat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryProbabilityRequest) Reset()         { *m = QueryProbabilityRequest{} }
func (m *QueryProbabilityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProbabilityRequest) ProtoMessage()    {}
func (*QueryProbabilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{12}
}

func (m *QueryProbabilityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryProbabilityRequest.Unmarshal(m, b)
}
func (m *QueryProbabilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryProbabilityRequest.Marshal(b, m, deterministic)
}
func (m *QueryProbabilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProbabilityRequest.Merge(m, src)
}
func (m *QueryProbabilityRequest) XXX_Size() int {
	return xxx_messageInfo_QueryProbabilityRequest.Size(m)
}
func (m *QueryProbabilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProbabilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProbabilityRequest proto.InternalMessageInfo

func (m *QueryProbabilityRequest) GetFromNode() []byte {
	if m != nil {
		return m.FromNode
	}
	return nil
}

func (m *QueryProbabilityRequest) GetToNode() []byte {
	if m != nil {
		return m.ToNode
	}
	return nil
}

func (m *QueryProbabilityRequest) GetAmtMsat() int64 {
	if m != nil {
		return m.AmtMsat
	}
	return 0
}

type QueryProbabilityResponse struct {
	/// The success probability for the requested pair.
	Probability float64 `protobuf:"fixed64,1,opt,name=probability,proto3" json:"probability,omitempty"`
	/// The historical data for the requested pair.
	History              *PairData `protobuf:"bytes,2,opt,name=history,proto3" json:"history,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *QueryProbabilityResponse) Reset()         { *m = QueryProbabilityResponse{} }
func (m *QueryProbabilityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProbabilityResponse) ProtoMessage()    {}
func (*QueryProbabilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{13}
}

func (m *QueryProbabilityResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryProbabilityResponse.Unmarshal(m, b)
}
func (m *QueryProbabilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryProbabilityResponse.Marshal(b, m, deterministic)
}
func (m *QueryProbabilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProbabilityResponse.Merge(m, src)
}
func (m *QueryProbabilityResponse) XXX_Size() int {
	return xxx_messageInfo_QueryProbabilityResponse.Size(m)
}
func (m *QueryProbabilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProbabilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProbabilityResponse proto.InternalMessageInfo

func (m *QueryProbabilityResponse) GetProbability() float64 {
	if m != nil {
		return m.Probability
	}
	return 0
}

func (m *QueryProbabilityResponse) GetHistory() *PairData {
	if m != nil {
		return m.History
	}
	return nil
}

type BuildRouteRequest struct {
	//*
	//The amount to send expressed in msat. If set to zero, the minimum routable
	//amount is used.
	AmtMsat int64 `protobuf:"varint,1,opt,name=amt_msat,json=amtMsat,proto3" json:"amt_msat,omitempty"`
	//*
	//CLTV delta from the current height that should be used for the timelock
	//of the final hop
	FinalCltvDelta int32 `protobuf:"varint,2,opt,name=final_cltv_delta,json=finalCltvDelta,proto3" json:"final_cltv_delta,omitempty"`
	//*
	//The channel id of the channel that must be taken to the first hop. If zero,
	//any channel may be used.
	OutgoingChanId uint64 `protobuf:"varint,3,opt,name=outgoing_chan_id,json=outgoingChanId,proto3" json:"outgoing_chan_id,omitempty"`
	//*
	//A list of hops that defines the route. This does not include the source hop
	//pubkey.
	HopPubkeys           [][]byte `protobuf:"bytes,4,rep,name=hop_pubkeys,json=hopPubkeys,proto3" json:"hop_pubkeys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildRouteRequest) Reset()         { *m = BuildRouteRequest{} }
func (m *BuildRouteRequest) String() string { return proto.CompactTextString(m) }
func (*BuildRouteRequest) ProtoMessage()    {}
func (*BuildRouteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{14}
}

func (m *BuildRouteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildRouteRequest.Unmarshal(m, b)
}
func (m *BuildRouteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildRouteRequest.Marshal(b, m, deterministic)
}
func (m *BuildRouteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildRouteRequest.Merge(m, src)
}
func (m *BuildRouteRequest) XXX_Size() int {
	return xxx_messageInfo_BuildRouteRequest.Size(m)
}
func (m *BuildRouteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildRouteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BuildRouteRequest proto.InternalMessageInfo

func (m *BuildRouteRequest) GetAmtMsat() int64 {
	if m != nil {
		return m.AmtMsat
	}
	return 0
}

func (m *BuildRouteRequest) GetFinalCltvDelta() int32 {
	if m != nil {
		return m.FinalCltvDelta
	}
	return 0
}

func (m *BuildRouteRequest) GetOutgoingChanId() uint64 {
	if m != nil {
		return m.OutgoingChanId
	}
	return 0
}

func (m *BuildRouteRequest) GetHopPubkeys() [][]byte {
	if m != nil {
		return m.HopPubkeys
	}
	return nil
}

type BuildRouteResponse struct {
	//*
	//Fully specified route that can be used to execute the payment.
	Route                *lnrpc.Route `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BuildRouteResponse) Reset()         { *m = BuildRouteResponse{} }
func (m *BuildRouteResponse) String() string { return proto.CompactTextString(m) }
func (*BuildRouteResponse) ProtoMessage()    {}
func (*BuildRouteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{15}
}

func (m *BuildRouteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildRouteResponse.Unmarshal(m, b)
}
func (m *BuildRouteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildRouteResponse.Marshal(b, m, deterministic)
}
func (m *BuildRouteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildRouteResponse.Merge(m, src)
}
func (m *BuildRouteResponse) XXX_Size() int {
	return xxx_messageInfo_BuildRouteResponse.Size(m)
}
func (m *BuildRouteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildRouteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BuildRouteResponse proto.InternalMessageInfo

func (m *BuildRouteResponse) GetRoute() *lnrpc.Route {
	if m != nil {
		return m.Route
	}
	return nil
}

type SubscribeHtlcEventsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeHtlcEventsRequest) Reset()         { *m = SubscribeHtlcEventsRequest{} }
func (m *SubscribeHtlcEventsRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeHtlcEventsRequest) ProtoMessage()    {}
func (*SubscribeHtlcEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{16}
}

func (m *SubscribeHtlcEventsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeHtlcEventsRequest.Unmarshal(m, b)
}
func (m *SubscribeHtlcEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeHtlcEventsRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeHtlcEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeHtlcEventsRequest.Merge(m, src)
}
func (m *SubscribeHtlcEventsRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeHtlcEventsRequest.Size(m)
}
func (m *SubscribeHtlcEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeHtlcEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeHtlcEventsRequest proto.InternalMessageInfo

//*
//HtlcEvent contains the htlc event that was processed. These are served on a
//best-effort basis; events are not persisted, delivery is not guaranteed
//(in the event of a crash in the switch, forward events may be lost) and
//some events may be replayed upon restart. Events consumed from this package
//should be de-duplicated by the htlc's unique combination of incoming and
//outgoing channel id and htlc id. [EXPERIMENTAL]
type HtlcEvent struct {
	//*
	//The short channel id that the incoming htlc arrived at our node on. This
	//value is zero for sends.
	IncomingChannelId uint64 `protobuf:"varint,1,opt,name=incoming_channel_id,json=incomingChannelId,proto3" json:"incoming_channel_id,omitempty"`
	//*
	//The short channel id that the outgoing htlc left our node on. This value
	//is zero for receives.
	OutgoingChannelId uint64 `protobuf:"varint,2,opt,name=outgoing_channel_id,json=outgoingChannelId,proto3" json:"outgoing_channel_id,omitempty"`
	//*
	//Incoming id is the index of the incoming htlc in the incoming channel.
	//This value is zero for sends.
	IncomingHtlcId uint64 `protobuf:"varint,3,opt,name=incoming_htlc_id,json=incomingHtlcId,proto3" json:"incoming_htlc_id,omitempty"`
	//*
	//Outgoing id is the index of the outgoing htlc in the outgoing channel.
	//This value is zero for receives.
	OutgoingHtlcId uint64 `protobuf:"varint,4,opt,name=outgoing_htlc_id,json=outgoingHtlcId,proto3" json:"outgoing_htlc_id,omitempty"`
	//*
	//The time in unix nanoseconds that the event occurred.
	TimestampNs uint64 `protobuf:"varint,5,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"`
	//*
	//The event type indicates whether the htlc was part of a send, receive or
	//forward.
	EventType HtlcEvent_EventType `protobuf:"varint,6,opt,name=event_type,json=eventType,proto3,enum=routerrpc.HtlcEvent_EventType" json:"event_type,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*HtlcEvent_ForwardEvent
	//	*HtlcEvent_ForwardFailEvent
	//	*HtlcEvent_SettleEvent
	//	*HtlcEvent_LinkFailEvent
	Event                isHtlcEvent_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HtlcEvent) Reset()         { *m = HtlcEvent{} }
func (m *HtlcEvent) String() string { return proto.CompactTextString(m) }
func (*HtlcEvent) ProtoMessage()    {}
func (*HtlcEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{17}
}

func (m *HtlcEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HtlcEvent.Unmarshal(m, b)
}
func (m *HtlcEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HtlcEvent.Marshal(b, m, deterministic)
}
func (m *HtlcEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HtlcEvent.Merge(m, src)
}
func (m *HtlcEvent) XXX_Size() int {
	return xxx_messageInfo_HtlcEvent.Size(m)
}
func (m *HtlcEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_HtlcEvent.DiscardUnknown(m)
}

var xxx_messageInfo_HtlcEvent proto.InternalMessageInfo

func (m *HtlcEvent) GetIncomingChannelId() uint64 {
	if m != nil {
		return m.IncomingChannelId
	}
	return 0
}

func (m *HtlcEvent) GetOutgoingChannelId() uint64 {
	if m != nil {
		return m.OutgoingChannelId
	}
	return 0
}

func (m *HtlcEvent) GetIncomingHtlcId() uint64 {
	if m != nil {
		return m.IncomingHtlcId
	}
	return 0
}

func (m *HtlcEvent) GetOutgoingHtlcId() uint64 {
	if m != nil {
		return m.OutgoingHtlcId
	}
	return 0
}

func (m *HtlcEvent) GetTimestampNs() uint64 {
	if m != nil {
		return m.TimestampNs
	}
	return 0
}

func (m *HtlcEvent) GetEventType() HtlcEvent_EventType {
	if m != nil {
		return m.EventType
	}
	return HtlcEvent_UNKNOWN
}

type isHtlcEvent_Event interface {
	isHtlcEvent_Event()
}

type HtlcEvent_ForwardEvent struct {
	ForwardEvent *ForwardEvent `protobuf:"bytes,7,opt,name=forward_event,json=forwardEvent,proto3,oneof"`
}

type HtlcEvent_ForwardFailEvent struct {
	ForwardFailEvent *ForwardFailEvent `protobuf:"bytes,8,opt,name=forward_fail_event,json=forwardFailEvent,proto3,oneof"`
}

type HtlcEvent_SettleEvent struct {
	SettleEvent *SettleEvent `protobuf:"bytes,9,opt,name=settle_event,json=settleEvent,proto3,oneof"`
}

type HtlcEvent_LinkFailEvent struct {
	LinkFailEvent *LinkFailEvent `protobuf:"bytes,10,opt,name=link_fail_event,json=linkFailEvent,proto3,oneof"`
}

func (*HtlcEvent_ForwardEvent) isHtlcEvent_Event() {}

func (*HtlcEvent_ForwardFailEvent) isHtlcEvent_Event() {}

func (*HtlcEvent_SettleEvent) isHtlcEvent_Event() {}

func (*HtlcEvent_LinkFailEvent) isHtlcEvent_Event() {}

func (m *HtlcEvent) GetEvent() isHtlcEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *HtlcEvent) GetForwardEvent() *ForwardEvent {
	if x, ok := m.GetEvent().(*HtlcEvent_ForwardEvent); ok {
		return x.ForwardEvent
	}
	return nil
}

func (m *HtlcEvent) GetForwardFailEvent() *ForwardFailEvent {
	if x, ok := m.GetEvent().(*HtlcEvent_ForwardFailEvent); ok {
		return x.ForwardFailEvent
	}
	return nil
}

func (m *HtlcEvent) GetSettleEvent() *SettleEvent {
	if x, ok := m.GetEvent().(*HtlcEvent_SettleEvent); ok {
		return x.SettleEvent
	}
	return nil
}

func (m *HtlcEvent) GetLinkFailEvent() *LinkFailEvent {
	if x, ok := m.GetEvent().(*HtlcEvent_LinkFailEvent); ok {
		return x.LinkFailEvent
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HtlcEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HtlcEvent_ForwardEvent)(nil),
		(*HtlcEvent_ForwardFailEvent)(nil),
		(*HtlcEvent_SettleEvent)(nil),
		(*HtlcEvent_LinkFailEvent)(nil),
	}
}

type HtlcInfo struct {
	// The timelock on the incoming htlc.
	IncomingTimelock uint32 `protobuf:"varint,1,opt,name=incoming_timelock,json=incomingTimelock,proto3" json:"incoming_timelock,omitempty"`
	// The timelock on the outgoing htlc.
	OutgoingTimelock uint32 `protobuf:"varint,2,opt,name=outgoing_timelock,json=outgoingTimelock,proto3" json:"outgoing_timelock,omitempty"`
	// The amount of the incoming htlc.
	IncomingAmtMsat uint64 `protobuf:"varint,3,opt,name=incoming_amt_msat,json=incomingAmtMsat,proto3" json:"incoming_amt_msat,omitempty"`
	// The amount of the outgoing htlc.
	OutgoingAmtMsat      uint64   `protobuf:"varint,4,opt,name=outgoing_amt_msat,json=outgoingAmtMsat,proto3" json:"outgoing_amt_msat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HtlcInfo) Reset()         { *m = HtlcInfo{} }
func (m *HtlcInfo) String() string { return proto.CompactTextString(m) }
func (*HtlcInfo) ProtoMessage()    {}
func (*HtlcInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{18}
}

func (m *HtlcInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HtlcInfo.Unmarshal(m, b)
}
func (m *HtlcInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HtlcInfo.Marshal(b, m, deterministic)
}
func (m *HtlcInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HtlcInfo.Merge(m, src)
}
func (m *HtlcInfo) XXX_Size() int {
	return xxx_messageInfo_HtlcInfo.Size(m)
}
func (m *HtlcInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HtlcInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HtlcInfo proto.InternalMessageInfo

func (m *HtlcInfo) GetIncomingTimelock() uint32 {
	if m != nil {
		return m.IncomingTimelock
	}
	return 0
}

func (m *HtlcInfo) GetOutgoingTimelock() uint32 {
	if m != nil {
		return m.OutgoingTimelock
	}
	return 0
}

func (m *HtlcInfo) GetIncomingAmtMsat() uint64 {
	if m != nil {
		return m.IncomingAmtMsat
	}
	return 0
}

func (m *HtlcInfo) GetOutgoingAmtMsat() uint64 {
	if m != nil {
		return m.OutgoingAmtMsat
	}
	return 0
}

type ForwardEvent struct {
	// Info contains details about the htlc that was forwarded.
	Info                 *HtlcInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ForwardEvent) Reset()         { *m = ForwardEvent{} }
func (m *ForwardEvent) String() string { return proto.CompactTextString(m) }
func (*ForwardEvent) ProtoMessage()    {}
func (*ForwardEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{19}
}

func (m *ForwardEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForwardEvent.Unmarshal(m, b)
}
func (m *ForwardEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForwardEvent.Marshal(b, m, deterministic)
}
func (m *ForwardEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardEvent.Merge(m, src)
}
func (m *ForwardEvent) XXX_Size() int {
	return xxx_messageInfo_ForwardEvent.Size(m)
}
func (m *ForwardEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardEvent proto.InternalMessageInfo

func (m *ForwardEvent) GetInfo() *HtlcInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type ForwardFailEvent struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForwardFailEvent) Reset()         { *m = ForwardFailEvent{} }
func (m *ForwardFailEvent) String() string { return proto.CompactTextString(m) }
func (*ForwardFailEvent) ProtoMessage()    {}
func (*ForwardFailEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{20}
}

func (m *ForwardFailEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForwardFailEvent.Unmarshal(m, b)
}
func (m *ForwardFailEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForwardFailEvent.Marshal(b, m, deterministic)
}
func (m *ForwardFailEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardFailEvent.Merge(m, src)
}
func (m *ForwardFailEvent) XXX_Size() int {
	return xxx_messageInfo_ForwardFailEvent.Size(m)
}
func (m *ForwardFailEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardFailEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardFailEvent proto.InternalMessageInfo

type SettleEvent struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettleEvent) Reset()         { *m = SettleEvent{} }
func (m *SettleEvent) String() string { return proto.CompactTextString(m) }
func (*SettleEvent) ProtoMessage()    {}
func (*SettleEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{21}
}

func (m *SettleEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettleEvent.Unmarshal(m, b)
}
func (m *SettleEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettleEvent.Marshal(b, m, deterministic)
}
func (m *SettleEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettleEvent.Merge(m, src)
}
func (m *SettleEvent) XXX_Size() int {
	return xxx_messageInfo_SettleEvent.Size(m)
}
func (m *SettleEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SettleEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SettleEvent proto.InternalMessageInfo

type LinkFailEvent struct {
	// Info contains details about the htlc that we failed.
	Info *HtlcInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	// FailureCode is the BOLT error code for the failure.
	WireFailure lnrpc.Failure_FailureCode `protobuf:"varint,2,opt,name=wire_failure,json=wireFailure,proto3,enum=lnrpc.Failure_FailureCode" json:"wire_failure,omitempty"`
	//*
	//FailureDetail provides additional information about the reason for the
	//failure. This detail enriches the information provided by the wire message
	//and may be 'no detail' if the wire message requires no additional metadata.
	FailureDetail FailureDetail `protobuf:"varint,3,opt,name=failure_detail,json=failureDetail,proto3,enum=routerrpc.FailureDetail" json:"failure_detail,omitempty"`
	// A string representation of the link failure.
	FailureString        string   `protobuf:"bytes,4,opt,name=failure_string,json=failureString,proto3" json:"failure_string,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LinkFailEvent) Reset()         { *m = LinkFailEvent{} }
func (m *LinkFailEvent) String() string { return proto.CompactTextString(m) }
func (*LinkFailEvent) ProtoMessage()    {}
func (*LinkFailEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{22}
}

func (m *LinkFailEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinkFailEvent.Unmarshal(m, b)
}
func (m *LinkFailEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinkFailEvent.Marshal(b, m, deterministic)
}
func (m *LinkFailEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkFailEvent.Merge(m, src)
}
func (m *LinkFailEvent) XXX_Size() int {
	return xxx_messageInfo_LinkFailEvent.Size(m)
}
func (m *LinkFailEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkFailEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LinkFailEvent proto.InternalMessageInfo

func (m *LinkFailEvent) GetInfo() *HtlcInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *LinkFailEvent) GetWireFailure() lnrpc.Failure_FailureCode {
	if m != nil {
		return m.WireFailure
	}
	return lnrpc.Failure_RESERVED
}

func (m *LinkFailEvent) GetFailureDetail() FailureDetail {
	if m != nil {
		return m.FailureDetail
	}
	return FailureDetail_UNKNOWN
}

func (m *LinkFailEvent) GetFailureString() string {
	if m != nil {
		return m.FailureString
	}
	return ""
}

type PaymentStatus struct {
	/// Current state the payment is in.
	State PaymentState `protobuf:"varint,1,opt,name=state,proto3,enum=routerrpc.PaymentState" json:"state,omitempty"`
	//*
	//The pre-image of the payment when state is SUCCEEDED.
	Preimage []byte `protobuf:"bytes,2,opt,name=preimage,proto3" json:"preimage,omitempty"`
	//*
	//The HTLCs made in attempt to settle the payment [EXPERIMENTAL].
	Htlcs                []*lnrpc.HTLCAttempt `protobuf:"bytes,4,rep,name=htlcs,proto3" json:"htlcs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PaymentStatus) Reset()         { *m = PaymentStatus{} }
func (m *PaymentStatus) String() string { return proto.CompactTextString(m) }
func (*PaymentStatus) ProtoMessage()    {}
func (*PaymentStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_454825b070336751, []int{23}
}

func (m *PaymentStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentStatus.Unmarshal(m, b)
}
func (m *PaymentStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentStatus.Marshal(b, m, deterministic)
}
func (m *PaymentStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentStatus.Merge(m, src)
}
func (m *PaymentStatus) XXX_Size() int {
	return xxx_messageInfo_PaymentStatus.Size(m)
}
func (m *PaymentStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentStatus proto.InternalMessageInfo

func (m *PaymentStatus) GetState() PaymentState {
	if m != nil {
		return m.State
	}
	return PaymentState_IN_FLIGHT
}

func (m *PaymentStatus) GetPreimage() []byte {
	if m != nil {
		return m.Preimage
	}
	return nil
}

func (m *PaymentStatus) GetHtlcs() []*lnrpc.HTLCAttempt {
	if m != nil {
		return m.Htlcs
	}
	return nil
}

func init() {
	proto.RegisterEnum("routerrpc.FailureDetail", FailureDetail_name, FailureDetail_value)
	proto.RegisterEnum("routerrpc.PaymentState", PaymentState_name, PaymentState_value)
	proto.RegisterEnum("routerrpc.HtlcEvent_EventType", HtlcEvent_EventType_name, HtlcEvent_EventType_value)
	proto.RegisterType((*SendPaymentRequest)(nil), "routerrpc.SendPaymentRequest")
	proto.RegisterMapType((map[uint64][]byte)(nil), "routerrpc.SendPaymentRequest.DestCustomRecordsEntry")
	proto.RegisterType((*TrackPaymentRequest)(nil), "routerrpc.TrackPaymentRequest")
	proto.RegisterType((*RouteFeeRequest)(nil), "routerrpc.RouteFeeRequest")
	proto.RegisterType((*RouteFeeResponse)(nil), "routerrpc.RouteFeeResponse")
	proto.RegisterType((*SendToRouteRequest)(nil), "routerrpc.SendToRouteRequest")
	proto.RegisterType((*SendToRouteResponse)(nil), "routerrpc.SendToRouteResponse")
	proto.RegisterType((*ResetMissionControlRequest)(nil), "routerrpc.ResetMissionControlRequest")
	proto.RegisterType((*ResetMissionControlResponse)(nil), "routerrpc.ResetMissionControlResponse")
	proto.RegisterType((*QueryMissionControlRequest)(nil), "routerrpc.QueryMissionControlRequest")
	proto.RegisterType((*QueryMissionControlResponse)(nil), "routerrpc.QueryMissionControlResponse")
	proto.RegisterType((*PairHistory)(nil), "routerrpc.PairHistory")
	proto.RegisterType((*PairData)(nil), "routerrpc.PairData")
	proto.RegisterType((*QueryProbabilityRequest)(nil), "routerrpc.QueryProbabilityRequest")
	proto.RegisterType((*QueryProbabilityResponse)(nil), "routerrpc.QueryProbabilityResponse")
	proto.RegisterType((*BuildRouteRequest)(nil), "routerrpc.BuildRouteRequest")
	proto.RegisterType((*BuildRouteResponse)(nil), "routerrpc.BuildRouteResponse")
	proto.RegisterType((*SubscribeHtlcEventsRequest)(nil), "routerrpc.SubscribeHtlcEventsRequest")
	proto.RegisterType((*HtlcEvent)(nil), "routerrpc.HtlcEvent")
	proto.RegisterType((*HtlcInfo)(nil), "routerrpc.HtlcInfo")
	proto.RegisterType((*ForwardEvent)(nil), "routerrpc.ForwardEvent")
	proto.RegisterType((*ForwardFailEvent)(nil), "routerrpc.ForwardFailEvent")
	proto.RegisterType((*SettleEvent)(nil), "routerrpc.SettleEvent")
	proto.RegisterType((*LinkFailEvent)(nil), "routerrpc.LinkFailEvent")
	proto.RegisterType((*PaymentStatus)(nil), "routerrpc.PaymentStatus")
}

func init() { proto.RegisterFile("v0.10.0/routerrpc/router.proto", fileDescriptor_454825b070336751) }

var fileDescriptor_454825b070336751 = []byte{
	// 2253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0xcf, 0x76, 0xdb, 0xb8,
	0xd5, 0x1f, 0x4a, 0x94, 0x2d, 0x5d, 0xfd, 0xa3, 0xe1, 0x4c, 0xa2, 0x4f, 0x9e, 0x64, 0x34, 0xfc,
	0x66, 0x12, 0x9d, 0x34, 0x51, 0x1c, 0xb7, 0xa7, 0x9d, 0xd3, 0x76, 0xa6, 0x95, 0x25, 0x3a, 0x66,
	0x22, 0x93, 0x1a, 0x48, 0x76, 0x92, 0x66, 0x81, 0x43, 0x4b, 0x90, 0xc5, 0x9a, 0x22, 0x55, 0x12,
	0x4a, 0xc6, 0xcb, 0xee, 0x7a, 0xba, 0xed, 0x43, 0x74, 0xd7, 0x27, 0xe8, 0xb6, 0xcf, 0xd1, 0x6d,
	0x9f, 0xa0, 0xeb, 0x1e, 0x80, 0xa0, 0x44, 0xd9, 0x72, 0xd2, 0x6e, 0x6c, 0xe2, 0x77, 0x2f, 0x2e,
	0xee, 0xc5, 0xfd, 0x5d, 0x5c, 0x40, 0xf0, 0xe0, 0xfd, 0x7e, 0xeb, 0xf9, 0x7e, 0x6b, 0xff, 0x59,
	0x18, 0x2c, 0x18, 0x0d, 0xc3, 0xf9, 0x48, 0x7e, 0xb5, 0xe6, 0x61, 0xc0, 0x02, 0x54, 0x58, 0xe2,
	0xf5, 0xaa, 0xe7, 0x0b, 0xf1, 0x7c, 0x14, 0xcb, 0xf4, 0x7f, 0x6c, 0x01, 0x1a, 0x50, 0x7f, 0xdc,
	0x77, 0xae, 0x66, 0xd4, 0x67, 0x98, 0xfe, 0x61, 0x41, 0x23, 0x86, 0x10, 0xa8, 0x63, 0x1a, 0xb1,
	0x9a, 0xd2, 0x50, 0x9a, 0x25, 0x2c, 0xbe, 0x91, 0x06, 0x59, 0x67, 0xc6, 0x6a, 0x99, 0x86, 0xd2,
	0xcc, 0x62, 0xfe, 0x89, 0xfe, 0x0f, 0xf2, 0xce, 0x8c, 0x91, 0x59, 0xe4, 0xb0, 0x5a, 0x49, 0xc0,
	0xdb, 0xce, 0x8c, 0x9d, 0x44, 0x0e, 0x43, 0x5f, 0x41, 0x69, 0x1e, 0x9b, 0x24, 0x53, 0x27, 0x9a,
	0xd6, 0xb2, 0xc2, 0x50, 0x51, 0x62, 0xc7, 0x4e, 0x34, 0x45, 0x4d, 0xd0, 0x26, 0xae, 0xef, 0x78,
	0x64, 0xe4, 0xb1, 0xf7, 0x64, 0x4c, 0x3d, 0xe6, 0xd4, 0xd4, 0x86, 0xd2, 0xcc, 0xe1, 0x8a, 0xc0,
	0x3b, 0x1e, 0x7b, 0xdf, 0xe5, 0x28, 0x7a, 0x04, 0xd5, 0xc4, 0x58, 0x18, 0x3b, 0x58, 0xcb, 0x35,
	0x94, 0x66, 0x01, 0x57, 0xe6, 0xeb, 0x6e, 0x3f, 0x82, 0x2a, 0x73, 0x67, 0x34, 0x58, 0x30, 0x12,
	0xd1, 0x51, 0xe0, 0x8f, 0xa3, 0xda, 0x56, 0x6c, 0x51, 0xc2, 0x83, 0x18, 0x45, 0x3a, 0x94, 0x27,
	0x94, 0x12, 0xcf, 0x9d, 0xb9, 0x8c, 0x70, 0xf7, 0xb7, 0x85, 0xfb, 0xc5, 0x09, 0xa5, 0x3d, 0x8e,
	0x0d, 0x1c, 0x86, 0xbe, 0x86, 0xca, 0x4a, 0x47, 0xc4, 0x58, 0x16, 0x4a, 0xa5, 0x44, 0x49, 0x04,
	0xfa, 0x04, 0xb4, 0x60, 0xc1, 0x2e, 0x02, 0xd7, 0xbf, 0x20, 0xa3, 0xa9, 0xe3, 0x13, 0x77, 0x5c,
	0xcb, 0x37, 0x94, 0xa6, 0x7a, 0x98, 0xd9, 0x57, 0x70, 0x25, 0x91, 0x75, 0xa6, 0x8e, 0x6f, 0x8e,
	0xd1, 0x43, 0xa8, 0x7a, 0x4e, 0xc4, 0xc8, 0x34, 0x98, 0x93, 0xf9, 0xe2, 0xfc, 0x92, 0x5e, 0xd5,
	0x2a, 0x62, 0x67, 0xca, 0x1c, 0x3e, 0x0e, 0xe6, 0x7d, 0x01, 0xa2, 0xfb, 0x00, 0x62, 0x57, 0xc4,
	0xe2, 0xb5, 0x82, 0x88, 0xa1, 0xc0, 0x11, 0xb1, 0x30, 0x7a, 0x0e, 0x45, 0x91, 0x53, 0x32, 0x75,
	0x7d, 0x16, 0xd5, 0xa0, 0x91, 0x6d, 0x16, 0x0f, 0xb4, 0x96, 0x48, 0x6e, 0x0b, 0x73, 0xc9, 0xb1,
	0xeb, 0x33, 0x0c, 0x61, 0xf2, 0x19, 0xa1, 0x31, 0xec, 0xf2, 0x2c, 0x92, 0xd1, 0x22, 0x62, 0xc1,
	0x8c, 0x84, 0x74, 0x14, 0x84, 0xe3, 0xa8, 0x56, 0x14, 0x53, 0x7f, 0xd6, 0x5a, 0x52, 0xa4, 0x75,
	0x93, 0x0d, 0xad, 0x2e, 0x8d, 0x58, 0x47, 0xcc, 0xc3, 0xf1, 0x34, 0xc3, 0x67, 0xe1, 0x15, 0xde,
	0x19, 0x5f, 0xc7, 0xd1, 0x13, 0x40, 0x8e, 0xe7, 0x05, 0x1f, 0x48, 0x44, 0xbd, 0x09, 0x91, 0xd9,
	0xa9, 0x55, 0x1b, 0x4a, 0x33, 0x8f, 0x35, 0x21, 0x19, 0x50, 0x6f, 0x22, 0xcd, 0xa3, 0x9f, 0x43,
	0x59, 0xf8, 0x34, 0xa1, 0x0e, 0x5b, 0x84, 0x34, 0xaa, 0x69, 0x8d, 0x6c, 0xb3, 0x72, 0xb0, 0x23,
	0x03, 0x39, 0x8a, 0xe1, 0x43, 0x97, 0xe1, 0x12, 0xd7, 0x93, 0xe3, 0x08, 0xed, 0x41, 0x61, 0xe6,
	0xfc, 0x48, 0xe6, 0x4e, 0xc8, 0xa2, 0xda, 0x4e, 0x43, 0x69, 0x96, 0x71, 0x7e, 0xe6, 0xfc, 0xd8,
	0xe7, 0x63, 0xd4, 0x82, 0x5d, 0x3f, 0x20, 0xae, 0x3f, 0xf1, 0xdc, 0x8b, 0x29, 0x23, 0x8b, 0xf9,
	0xd8, 0x61, 0x34, 0xaa, 0x21, 0xe1, 0xc3, 0x8e, 0x1f, 0x98, 0x52, 0x72, 0x1a, 0x0b, 0xea, 0x5d,
	0xb8, 0xbb, 0x39, 0x3e, 0x4e, 0x78, 0x9e, 0x20, 0x5e, 0x03, 0x2a, 0xe6, 0x9f, 0xe8, 0x0e, 0xe4,
	0xde, 0x3b, 0xde, 0x82, 0x8a, 0x22, 0x28, 0xe1, 0x78, 0xf0, 0xcb, 0xcc, 0xb7, 0x8a, 0x3e, 0x85,
	0xdd, 0x61, 0xe8, 0x8c, 0x2e, 0xaf, 0xd5, 0xd1, 0xf5, 0x32, 0x50, 0x6e, 0x96, 0xc1, 0x2d, 0xfe,
	0x66, 0x6e, 0xf1, 0x57, 0xff, 0x1e, 0xaa, 0x22, 0xc3, 0x47, 0x94, 0x7e, 0xac, 0x5a, 0xef, 0x01,
	0xaf, 0x45, 0xc1, 0xed, 0xb8, 0x62, 0xb7, 0x9c, 0x19, 0xa7, 0xb5, 0x3e, 0x06, 0x6d, 0x35, 0x3f,
	0x9a, 0x07, 0x7e, 0x44, 0x79, 0x29, 0x72, 0x02, 0x70, 0x0e, 0x73, 0xca, 0x0b, 0xb2, 0x2b, 0x62,
	0x56, 0x45, 0xe2, 0x47, 0x94, 0x0a, 0xba, 0x3f, 0x8c, 0x2b, 0x8c, 0x78, 0xc1, 0xe8, 0x92, 0xd7,
	0xac, 0x73, 0x25, 0xcd, 0x97, 0x39, 0xdc, 0x0b, 0x46, 0x97, 0x5d, 0x0e, 0xea, 0xef, 0xe2, 0x63,
	0x65, 0x18, 0x88, 0xb5, 0xfe, 0x87, 0xed, 0xd0, 0x21, 0x27, 0xb8, 0x28, 0xcc, 0x16, 0x0f, 0x4a,
	0x69, 0x52, 0xe3, 0x58, 0xa4, 0xbf, 0x83, 0xdd, 0x35, 0xe3, 0x32, 0x8a, 0x3a, 0xe4, 0xe7, 0x21,
	0x75, 0x67, 0xce, 0x05, 0x95, 0x96, 0x97, 0x63, 0xd4, 0x84, 0xed, 0x89, 0xe3, 0x7a, 0x8b, 0x30,
	0x31, 0x5c, 0x49, 0x48, 0x16, 0xa3, 0x38, 0x11, 0xeb, 0x5f, 0x40, 0x1d, 0xd3, 0x88, 0xb2, 0x13,
	0x37, 0x8a, 0xdc, 0xc0, 0xef, 0x04, 0x3e, 0x0b, 0x03, 0x4f, 0x46, 0xa0, 0xdf, 0x87, 0xbd, 0x8d,
	0xd2, 0xd8, 0x05, 0x3e, 0xf9, 0x87, 0x05, 0x0d, 0xaf, 0x36, 0x4f, 0xfe, 0x01, 0xf6, 0x36, 0x4a,
	0xa5, 0xff, 0x4f, 0x20, 0x37, 0x77, 0xdc, 0x90, 0xe7, 0x9e, 0x17, 0xe5, 0xdd, 0x54, 0x51, 0xf6,
	0x1d, 0x37, 0x3c, 0x76, 0x23, 0x16, 0x84, 0x57, 0x38, 0x56, 0x7a, 0xa9, 0xe6, 0x15, 0x2d, 0xa3,
	0xff, 0x59, 0x81, 0x62, 0x4a, 0xc8, 0x4b, 0xc3, 0x0f, 0xc6, 0x94, 0x4c, 0xc2, 0x60, 0x96, 0x6c,
	0x02, 0x07, 0x8e, 0xc2, 0x60, 0xc6, 0x39, 0x21, 0x84, 0x2c, 0x90, 0x04, 0xde, 0xe2, 0xc3, 0x61,
	0x80, 0x9e, 0xc2, 0xf6, 0x34, 0x36, 0x20, 0x0e, 0xc2, 0xe2, 0xc1, 0xee, 0xb5, 0xb5, 0xbb, 0x0e,
	0x73, 0x70, 0xa2, 0xf3, 0x52, 0xcd, 0x67, 0x35, 0xf5, 0xa5, 0x9a, 0x57, 0xb5, 0xdc, 0x4b, 0x35,
	0x9f, 0xd3, 0xb6, 0x5e, 0xaa, 0xf9, 0x2d, 0x6d, 0x5b, 0xff, 0x97, 0x02, 0xf9, 0x44, 0x9b, 0x7b,
	0xc2, 0xb7, 0x94, 0x70, 0x5e, 0x48, 0x32, 0xe5, 0x39, 0x30, 0x74, 0x67, 0x14, 0x35, 0xa0, 0x24,
	0x84, 0xeb, 0x14, 0x05, 0x8e, 0xb5, 0x05, 0x4d, 0xc5, 0x09, 0x9d, 0x68, 0x08, 0x3e, 0xaa, 0xf2,
	0x84, 0x8e, 0x55, 0x92, 0x26, 0x13, 0x2d, 0x46, 0x23, 0x1a, 0x45, 0xf1, 0x2a, 0xb9, 0x58, 0x45,
	0x62, 0x62, 0xa1, 0x87, 0x50, 0x4d, 0x54, 0x92, 0xb5, 0xb6, 0x62, 0xbe, 0x4a, 0x58, 0x2e, 0xd7,
	0x04, 0x2d, 0xad, 0x37, 0x5b, 0xf5, 0x84, 0xca, 0x4a, 0x91, 0x2f, 0x1a, 0x07, 0xaf, 0xff, 0x1e,
	0xee, 0x89, 0x54, 0xf6, 0xc3, 0xe0, 0xdc, 0x39, 0x77, 0x3d, 0x97, 0x5d, 0x25, 0x24, 0xe7, 0x81,
	0x87, 0xc1, 0x8c, 0xf0, 0xbd, 0x4d, 0x52, 0xc0, 0x01, 0x2b, 0x18, 0x53, 0x9e, 0x02, 0x16, 0xc4,
	0x22, 0x99, 0x02, 0x16, 0x08, 0x41, 0xba, 0x97, 0x66, 0xd7, 0x7a, 0xa9, 0x7e, 0x09, 0xb5, 0x9b,
	0x6b, 0x49, 0xce, 0x34, 0xa0, 0x38, 0x5f, 0xc1, 0x62, 0x39, 0x05, 0xa7, 0xa1, 0x74, 0x6e, 0x33,
	0x9f, 0xce, 0xad, 0xfe, 0x57, 0x05, 0x76, 0x0e, 0x17, 0xae, 0x37, 0x5e, 0x2b, 0xdc, 0xb4, 0x77,
	0xca, 0x7a, 0xa7, 0xdf, 0xd4, 0xc6, 0x33, 0x1b, 0xdb, 0xf8, 0xa6, 0x56, 0x99, 0xbd, 0xb5, 0x55,
	0x7e, 0x09, 0xc5, 0x55, 0x97, 0x8c, 0x6a, 0x6a, 0x23, 0xdb, 0x2c, 0x61, 0x98, 0x26, 0x2d, 0x32,
	0xd2, 0xbf, 0x05, 0x94, 0x76, 0x54, 0x6e, 0xc8, 0xf2, 0xfc, 0x50, 0x6e, 0x3f, 0x3f, 0xbe, 0x80,
	0xfa, 0x60, 0x71, 0x1e, 0x8d, 0x42, 0xf7, 0x9c, 0x1e, 0x33, 0x6f, 0x64, 0xbc, 0xa7, 0x3e, 0x8b,
	0x92, 0x2a, 0xfd, 0xb7, 0x0a, 0x85, 0x25, 0xca, 0x8f, 0x67, 0xd7, 0x1f, 0x05, 0xb3, 0xc4, 0x69,
	0x9f, 0x7a, 0xdc, 0xef, 0xb8, 0x29, 0xec, 0x24, 0xa2, 0x4e, 0x2c, 0x31, 0xc7, 0x5c, 0x7f, 0x2d,
	0x48, 0xa9, 0x9f, 0x89, 0xf5, 0xd3, 0x31, 0xc6, 0xfa, 0x4d, 0xd0, 0x96, 0xf6, 0xa7, 0xcc, 0x1b,
	0x2d, 0x37, 0x05, 0x57, 0x12, 0x9c, 0x3b, 0x13, 0x6b, 0x2e, 0x2d, 0x27, 0x9a, 0x6a, 0xac, 0x99,
	0xe0, 0x52, 0xf3, 0x2b, 0x28, 0xf1, 0x7a, 0x88, 0x98, 0x33, 0x9b, 0x13, 0x3f, 0x12, 0x75, 0xa1,
	0xe2, 0xe2, 0x12, 0xb3, 0x22, 0xf4, 0x1d, 0x00, 0xe5, 0xf1, 0x11, 0x76, 0x35, 0xa7, 0xa2, 0x24,
	0x2a, 0x07, 0x0f, 0x52, 0xc4, 0x58, 0x6e, 0x40, 0x4b, 0xfc, 0x1d, 0x5e, 0xcd, 0x29, 0x2e, 0xd0,
	0xe4, 0x13, 0x7d, 0x0f, 0xe5, 0x49, 0x10, 0x7e, 0x70, 0xc2, 0x31, 0x11, 0xa0, 0x3c, 0x36, 0xee,
	0xa5, 0x2c, 0x1c, 0xc5, 0x72, 0x31, 0xfd, 0xf8, 0x33, 0x5c, 0x9a, 0xa4, 0xc6, 0xe8, 0x15, 0xa0,
	0x64, 0xbe, 0xa8, 0xf2, 0xd8, 0x48, 0x5e, 0x18, 0xd9, 0xbb, 0x69, 0x84, 0x1f, 0xd2, 0x89, 0x21,
	0x6d, 0x72, 0x0d, 0x43, 0xbf, 0x82, 0x52, 0x44, 0x19, 0xf3, 0xa8, 0x34, 0x53, 0x10, 0x66, 0xee,
	0xae, 0xdd, 0x69, 0xb8, 0x38, 0xb1, 0x50, 0x8c, 0x56, 0x43, 0x74, 0x08, 0x55, 0xcf, 0xf5, 0x2f,
	0xd3, 0x6e, 0x80, 0x98, 0x5f, 0x4b, 0xcd, 0xef, 0xb9, 0xfe, 0x65, 0xda, 0x87, 0xb2, 0x97, 0x06,
	0xf4, 0x5f, 0x43, 0x61, 0xb9, 0x4b, 0xa8, 0x08, 0xdb, 0xa7, 0xd6, 0x2b, 0xcb, 0x7e, 0x6d, 0x69,
	0x9f, 0xa1, 0x3c, 0xa8, 0x03, 0xc3, 0xea, 0x6a, 0x0a, 0x87, 0xb1, 0xd1, 0x31, 0xcc, 0x33, 0x43,
	0xcb, 0xf0, 0xc1, 0x91, 0x8d, 0x5f, 0xb7, 0x71, 0x57, 0xcb, 0x1e, 0x6e, 0x43, 0x4e, 0xac, 0xab,
	0xff, 0x5d, 0x81, 0xbc, 0xc8, 0xa0, 0x3f, 0x09, 0xd0, 0x4f, 0x60, 0x49, 0x2e, 0x71, 0xb8, 0xf1,
	0x86, 0x2b, 0x58, 0x57, 0xc6, 0x4b, 0xc2, 0x0c, 0x25, 0xce, 0x95, 0x97, 0xd4, 0x58, 0x2a, 0x67,
	0x62, 0xe5, 0x44, 0xb0, 0x54, 0x7e, 0x9c, 0xb2, 0xbc, 0x76, 0xe4, 0xa8, 0xb8, 0x9a, 0x08, 0x92,
	0x13, 0xf6, 0x71, 0xca, 0xf0, 0xda, 0x49, 0xac, 0xe2, 0x6a, 0x22, 0x90, 0xba, 0xfa, 0x2f, 0xa0,
	0x94, 0xce, 0x39, 0x7a, 0x04, 0xaa, 0xeb, 0x4f, 0x02, 0x59, 0x88, 0xbb, 0xd7, 0xc8, 0xc5, 0x83,
	0xc4, 0x42, 0x41, 0x47, 0xa0, 0x5d, 0xcf, 0xb3, 0x5e, 0x86, 0x62, 0x2a, 0x69, 0xfa, 0x3f, 0x15,
	0x28, 0xaf, 0x25, 0xe1, 0xbf, 0xb6, 0x8e, 0xbe, 0x83, 0xd2, 0x07, 0x37, 0xa4, 0x24, 0xdd, 0xfe,
	0x2b, 0x07, 0xf5, 0xf5, 0xf6, 0x9f, 0xfc, 0xef, 0x04, 0x63, 0x8a, 0x8b, 0x5c, 0x5f, 0x02, 0xe8,
	0x37, 0x50, 0x91, 0x33, 0xc9, 0x98, 0x32, 0xc7, 0xf5, 0xc4, 0x56, 0x55, 0xd6, 0xe8, 0x21, 0x75,
	0xbb, 0x42, 0x8e, 0xcb, 0x93, 0xf4, 0x10, 0x7d, 0xb3, 0x32, 0x10, 0xb1, 0xd0, 0xf5, 0x2f, 0xc4,
	0xfe, 0x15, 0x96, 0x6a, 0x03, 0x01, 0xf2, 0x46, 0x5e, 0x96, 0x97, 0xc7, 0x01, 0x73, 0xd8, 0x22,
	0x42, 0x4f, 0x21, 0x17, 0x31, 0x47, 0x9e, 0x64, 0x95, 0xb5, 0xda, 0x4a, 0x29, 0x52, 0x1c, 0x6b,
	0xad, 0xdd, 0x7e, 0x32, 0x37, 0x6e, 0x3f, 0x39, 0x7e, 0x62, 0xc4, 0xa7, 0x68, 0xf1, 0x00, 0xc9,
	0xe0, 0x8f, 0x87, 0xbd, 0x4e, 0x9b, 0x31, 0x3a, 0x9b, 0x33, 0x1c, 0x2b, 0xc4, 0xdd, 0xed, 0xf1,
	0x1f, 0x55, 0x28, 0xaf, 0x05, 0xb5, 0xce, 0xea, 0x32, 0x14, 0x2c, 0x9b, 0x74, 0x8d, 0x61, 0xdb,
	0xec, 0x69, 0x0a, 0xd2, 0xa0, 0x64, 0x5b, 0xa6, 0x6d, 0x91, 0xae, 0xd1, 0xb1, 0xbb, 0x9c, 0xdf,
	0x9f, 0xc3, 0x4e, 0xcf, 0xb4, 0x5e, 0x11, 0xcb, 0x1e, 0x12, 0xa3, 0x67, 0xbe, 0x30, 0x0f, 0x7b,
	0x86, 0x96, 0x45, 0x77, 0x40, 0xb3, 0x2d, 0xd2, 0x39, 0x6e, 0x9b, 0x16, 0x19, 0x9a, 0x27, 0x86,
	0x7d, 0x3a, 0xd4, 0x54, 0x8e, 0x72, 0x47, 0x88, 0xf1, 0xa6, 0x63, 0x18, 0xdd, 0x01, 0x39, 0x69,
	0xbf, 0xd1, 0x72, 0xa8, 0x06, 0x77, 0x4c, 0x6b, 0x70, 0x7a, 0x74, 0x64, 0x76, 0x4c, 0xc3, 0x1a,
	0x92, 0xc3, 0x76, 0xaf, 0x6d, 0x75, 0x0c, 0x6d, 0x0b, 0xdd, 0x05, 0x64, 0x5a, 0x1d, 0xfb, 0xa4,
	0xdf, 0x33, 0x86, 0x06, 0x49, 0xea, 0x68, 0x1b, 0xed, 0x42, 0x55, 0xd8, 0x69, 0x77, 0xbb, 0xe4,
	0xa8, 0x6d, 0xf6, 0x8c, 0xae, 0x96, 0xe7, 0x9e, 0x48, 0x8d, 0x01, 0xe9, 0x9a, 0x83, 0xf6, 0x21,
	0x87, 0x0b, 0x7c, 0x4d, 0xd3, 0x3a, 0xb3, 0xcd, 0x8e, 0x41, 0x3a, 0xdc, 0x2c, 0x47, 0x81, 0x2b,
	0x27, 0xe8, 0xa9, 0xd5, 0x35, 0x70, 0xbf, 0x6d, 0x76, 0xb5, 0x22, 0xda, 0x83, 0x7b, 0x09, 0x6c,
	0xbc, 0xe9, 0x9b, 0xf8, 0x2d, 0x19, 0xda, 0x36, 0x19, 0xd8, 0xb6, 0xa5, 0x95, 0xd2, 0x96, 0x78,
	0xb4, 0x76, 0xdf, 0xb0, 0xb4, 0x32, 0xba, 0x07, 0xbb, 0x27, 0xfd, 0x3e, 0x49, 0x24, 0x49, 0xb0,
	0x15, 0xae, 0xde, 0xee, 0x76, 0xb1, 0x31, 0x18, 0x90, 0x13, 0x73, 0x70, 0xd2, 0x1e, 0x76, 0x8e,
	0xb5, 0x2a, 0x0f, 0x69, 0x60, 0x0c, 0xc9, 0xd0, 0x1e, 0xb6, 0x7b, 0x2b, 0x5c, 0xe3, 0x0e, 0xad,
	0x70, 0xbe, 0x68, 0xcf, 0x7e, 0xad, 0xed, 0xf0, 0x0d, 0xe7, 0xb0, 0x7d, 0x26, 0x5d, 0x44, 0x3c,
	0x76, 0x99, 0x9e, 0x64, 0x4d, 0x6d, 0x97, 0x83, 0xa6, 0x75, 0xd6, 0xee, 0x99, 0x5d, 0xf2, 0xca,
	0x78, 0x2b, 0xce, 0xa1, 0x3b, 0x1c, 0x8c, 0x3d, 0x23, 0x7d, 0x6c, 0xbf, 0xe0, 0x8e, 0x68, 0x9f,
	0x23, 0x04, 0x95, 0x8e, 0x89, 0x3b, 0xa7, 0xbd, 0x36, 0x26, 0xd8, 0x3e, 0x1d, 0x1a, 0xda, 0xdd,
	0xc7, 0x7f, 0x53, 0xa0, 0x94, 0xe6, 0x19, 0xcf, 0xba, 0x69, 0x91, 0xa3, 0x9e, 0xf9, 0xe2, 0x78,
	0x18, 0x93, 0x60, 0x70, 0xda, 0xe1, 0x29, 0x33, 0xf8, 0xf9, 0x86, 0xa0, 0x12, 0x6f, 0xfa, 0x32,
	0xd8, 0x0c, 0x5f, 0x4b, 0x62, 0x96, 0x2d, 0xed, 0x66, 0xb9, 0xf3, 0x12, 0x34, 0x30, 0xb6, 0xb1,
	0xa6, 0xa2, 0xaf, 0xa1, 0x21, 0x11, 0x9e, 0x57, 0x8c, 0x8d, 0xce, 0x90, 0xf4, 0xdb, 0x6f, 0x4f,
	0x78, 0xda, 0x63, 0x92, 0x0d, 0xb4, 0x1c, 0xfa, 0x12, 0xf6, 0x96, 0x5a, 0x9b, 0x78, 0x71, 0xf0,
	0x97, 0x6d, 0xd8, 0x12, 0x6d, 0x3e, 0x44, 0xbf, 0x85, 0x72, 0xea, 0x19, 0x7b, 0x76, 0x80, 0xee,
	0x7f, 0xf4, 0x81, 0x5b, 0x4f, 0x1e, 0x03, 0x12, 0xde, 0x57, 0xd0, 0x21, 0x54, 0xd2, 0xef, 0xb9,
	0xb3, 0x03, 0x94, 0xee, 0x8e, 0x1b, 0x9e, 0x7a, 0x1b, 0x6c, 0xbc, 0x02, 0xcd, 0x88, 0x98, 0x3b,
	0xe3, 0x45, 0x2a, 0x5f, 0x5c, 0xa8, 0x9e, 0xb2, 0x72, 0xed, 0x19, 0x57, 0xdf, 0xdb, 0x28, 0x93,
	0xf7, 0x9a, 0x1e, 0x3f, 0x10, 0x97, 0x6f, 0x9e, 0x1b, 0x01, 0xad, 0x3f, 0xb4, 0xea, 0x0f, 0x6e,
	0x13, 0x4b, 0x6b, 0x63, 0xd8, 0xdd, 0xf0, 0x8c, 0x41, 0xdf, 0xa4, 0x3d, 0xb8, 0xf5, 0x11, 0x54,
	0x7f, 0xf8, 0x29, 0xb5, 0xd5, 0x2a, 0x1b, 0xde, 0x3b, 0x6b, 0xab, 0xdc, 0xfe, 0x5a, 0x5a, 0x5b,
	0xe5, 0x63, 0xcf, 0xa6, 0x77, 0xa0, 0x5d, 0xbf, 0x1e, 0x23, 0xfd, 0xfa, 0xdc, 0x9b, 0xf7, 0xf4,
	0xfa, 0xff, 0x7f, 0x54, 0x47, 0x1a, 0x37, 0x01, 0x56, 0x97, 0x4c, 0xf4, 0x45, 0x6a, 0xca, 0x8d,
	0x4b, 0x72, 0xfd, 0xfe, 0x2d, 0x52, 0x69, 0x6a, 0x08, 0xbb, 0x1b, 0x6e, 0x9d, 0x6b, 0xbb, 0x71,
	0xfb, 0xad, 0xb4, 0x7e, 0x67, 0xd3, 0xe5, 0x6c, 0x5f, 0x41, 0x27, 0x31, 0x2f, 0x92, 0x9f, 0x54,
	0x3e, 0x41, 0xf4, 0xda, 0xe6, 0x26, 0xb2, 0x88, 0xf4, 0xec, 0x9f, 0x32, 0xca, 0xbe, 0x82, 0x6c,
	0x28, 0xa5, 0xc9, 0xfd, 0x49, 0xd6, 0x7f, 0xca, 0xe0, 0xe1, 0xf3, 0xdf, 0x3d, 0xbb, 0x70, 0xd9,
	0x74, 0x71, 0xde, 0x1a, 0x05, 0xb3, 0x67, 0x9e, 0x3f, 0xe2, 0x7f, 0xc6, 0x4f, 0xc3, 0xf9, 0xe8,
	0x59, 0xf2, 0xb3, 0xa5, 0xfc, 0x4d, 0x32, 0xb1, 0x73, 0xbe, 0x25, 0x7e, 0x9a, 0xfc, 0xe9, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x7c, 0xf9, 0xe8, 0xfc, 0xd8, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouterClient interface {
	//*
	//SendPaymentV2 attempts to route a payment described by the passed
	//PaymentRequest to the final destination. The call returns a stream of
	//payment updates.
	SendPaymentV2(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (Router_SendPaymentV2Client, error)
	//*
	//TrackPaymentV2 returns an update stream for the payment identified by the
	//payment hash.
	TrackPaymentV2(ctx context.Context, in *TrackPaymentRequest, opts ...grpc.CallOption) (Router_TrackPaymentV2Client, error)
	//*
	//EstimateRouteFee allows callers to obtain a lower bound w.r.t how much it
	//may cost to send an HTLC to the target end destination.
	EstimateRouteFee(ctx context.Context, in *RouteFeeRequest, opts ...grpc.CallOption) (*RouteFeeResponse, error)
	//*
	//SendToRoute attempts to make a payment via the specified route. This method
	//differs from SendPayment in that it allows users to specify a full route
	//manually. This can be used for things like rebalancing, and atomic swaps.
	SendToRoute(ctx context.Context, in *SendToRouteRequest, opts ...grpc.CallOption) (*SendToRouteResponse, error)
	//*
	//ResetMissionControl clears all mission control state and starts with a clean
	//slate.
	ResetMissionControl(ctx context.Context, in *ResetMissionControlRequest, opts ...grpc.CallOption) (*ResetMissionControlResponse, error)
	//*
	//QueryMissionControl exposes the internal mission control state to callers.
	//It is a development feature.
	QueryMissionControl(ctx context.Context, in *QueryMissionControlRequest, opts ...grpc.CallOption) (*QueryMissionControlResponse, error)
	//*
	//QueryProbability returns the current success probability estimate for a
	//given node pair and amount.
	QueryProbability(ctx context.Context, in *QueryProbabilityRequest, opts ...grpc.CallOption) (*QueryProbabilityResponse, error)
	//*
	//BuildRoute builds a fully specified route based on a list of hop public
	//keys. It retrieves the relevant channel policies from the graph in order to
	//calculate the correct fees and time locks.
	BuildRoute(ctx context.Context, in *BuildRouteRequest, opts ...grpc.CallOption) (*BuildRouteResponse, error)
	//*
	//SubscribeHtlcEvents creates a uni-directional stream from the server to
	//the client which delivers a stream of htlc events.
	SubscribeHtlcEvents(ctx context.Context, in *SubscribeHtlcEventsRequest, opts ...grpc.CallOption) (Router_SubscribeHtlcEventsClient, error)
	//*
	//Deprecated, use SendPaymentV2. SendPayment attempts to route a payment
	//described by the passed PaymentRequest to the final destination. The call
	//returns a stream of payment status updates.
	//
	// Deprecated: Do not use.
	SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (Router_SendPaymentClient, error)
	//*
	//Deprecated, use TrackPaymentV2. TrackPayment returns an update stream for
	//the payment identified by the payment hash.
	//
	// Deprecated: Do not use.
	TrackPayment(ctx context.Context, in *TrackPaymentRequest, opts ...grpc.CallOption) (Router_TrackPaymentClient, error)
}

type routerClient struct {
	cc grpc.ClientConnInterface
}

func NewRouterClient(cc grpc.ClientConnInterface) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) SendPaymentV2(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (Router_SendPaymentV2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[0], "/routerrpc.Router/SendPaymentV2", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerSendPaymentV2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Router_SendPaymentV2Client interface {
	Recv() (*lnrpc.Payment, error)
	grpc.ClientStream
}

type routerSendPaymentV2Client struct {
	grpc.ClientStream
}

func (x *routerSendPaymentV2Client) Recv() (*lnrpc.Payment, error) {
	m := new(lnrpc.Payment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) TrackPaymentV2(ctx context.Context, in *TrackPaymentRequest, opts ...grpc.CallOption) (Router_TrackPaymentV2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[1], "/routerrpc.Router/TrackPaymentV2", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerTrackPaymentV2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Router_TrackPaymentV2Client interface {
	Recv() (*lnrpc.Payment, error)
	grpc.ClientStream
}

type routerTrackPaymentV2Client struct {
	grpc.ClientStream
}

func (x *routerTrackPaymentV2Client) Recv() (*lnrpc.Payment, error) {
	m := new(lnrpc.Payment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) EstimateRouteFee(ctx context.Context, in *RouteFeeRequest, opts ...grpc.CallOption) (*RouteFeeResponse, error) {
	out := new(RouteFeeResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/EstimateRouteFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) SendToRoute(ctx context.Context, in *SendToRouteRequest, opts ...grpc.CallOption) (*SendToRouteResponse, error) {
	out := new(SendToRouteResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/SendToRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) ResetMissionControl(ctx context.Context, in *ResetMissionControlRequest, opts ...grpc.CallOption) (*ResetMissionControlResponse, error) {
	out := new(ResetMissionControlResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/ResetMissionControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) QueryMissionControl(ctx context.Context, in *QueryMissionControlRequest, opts ...grpc.CallOption) (*QueryMissionControlResponse, error) {
	out := new(QueryMissionControlResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/QueryMissionControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) QueryProbability(ctx context.Context, in *QueryProbabilityRequest, opts ...grpc.CallOption) (*QueryProbabilityResponse, error) {
	out := new(QueryProbabilityResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/QueryProbability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) BuildRoute(ctx context.Context, in *BuildRouteRequest, opts ...grpc.CallOption) (*BuildRouteResponse, error) {
	out := new(BuildRouteResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/BuildRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) SubscribeHtlcEvents(ctx context.Context, in *SubscribeHtlcEventsRequest, opts ...grpc.CallOption) (Router_SubscribeHtlcEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[2], "/routerrpc.Router/SubscribeHtlcEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerSubscribeHtlcEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Router_SubscribeHtlcEventsClient interface {
	Recv() (*HtlcEvent, error)
	grpc.ClientStream
}

type routerSubscribeHtlcEventsClient struct {
	grpc.ClientStream
}

func (x *routerSubscribeHtlcEventsClient) Recv() (*HtlcEvent, error) {
	m := new(HtlcEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deprecated: Do not use.
func (c *routerClient) SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (Router_SendPaymentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[3], "/routerrpc.Router/SendPayment", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerSendPaymentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Router_SendPaymentClient interface {
	Recv() (*PaymentStatus, error)
	grpc.ClientStream
}

type routerSendPaymentClient struct {
	grpc.ClientStream
}

func (x *routerSendPaymentClient) Recv() (*PaymentStatus, error) {
	m := new(PaymentStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deprecated: Do not use.
func (c *routerClient) TrackPayment(ctx context.Context, in *TrackPaymentRequest, opts ...grpc.CallOption) (Router_TrackPaymentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[4], "/routerrpc.Router/TrackPayment", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerTrackPaymentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Router_TrackPaymentClient interface {
	Recv() (*PaymentStatus, error)
	grpc.ClientStream
}

type routerTrackPaymentClient struct {
	grpc.ClientStream
}

func (x *routerTrackPaymentClient) Recv() (*PaymentStatus, error) {
	m := new(PaymentStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouterServer is the server API for Router service.
type RouterServer interface {
	//*
	//SendPaymentV2 attempts to route a payment described by the passed
	//PaymentRequest to the final destination. The call returns a stream of
	//payment updates.
	SendPaymentV2(*SendPaymentRequest, Router_SendPaymentV2Server) error
	//*
	//TrackPaymentV2 returns an update stream for the payment identified by the
	//payment hash.
	TrackPaymentV2(*TrackPaymentRequest, Router_TrackPaymentV2Server) error
	//*
	//EstimateRouteFee allows callers to obtain a lower bound w.r.t how much it
	//may cost to send an HTLC to the target end destination.
	EstimateRouteFee(context.Context, *RouteFeeRequest) (*RouteFeeResponse, error)
	//*
	//SendToRoute attempts to make a payment via the specified route. This method
	//differs from SendPayment in that it allows users to specify a full route
	//manually. This can be used for things like rebalancing, and atomic swaps.
	SendToRoute(context.Context, *SendToRouteRequest) (*SendToRouteResponse, error)
	//*
	//ResetMissionControl clears all mission control state and starts with a clean
	//slate.
	ResetMissionControl(context.Context, *ResetMissionControlRequest) (*ResetMissionControlResponse, error)
	//*
	//QueryMissionControl exposes the internal mission control state to callers.
	//It is a development feature.
	QueryMissionControl(context.Context, *QueryMissionControlRequest) (*QueryMissionControlResponse, error)
	//*
	//QueryProbability returns the current success probability estimate for a
	//given node pair and amount.
	QueryProbability(context.Context, *QueryProbabilityRequest) (*QueryProbabilityResponse, error)
	//*
	//BuildRoute builds a fully specified route based on a list of hop public
	//keys. It retrieves the relevant channel policies from the graph in order to
	//calculate the correct fees and time locks.
	BuildRoute(context.Context, *BuildRouteRequest) (*BuildRouteResponse, error)
	//*
	//SubscribeHtlcEvents creates a uni-directional stream from the server to
	//the client which delivers a stream of htlc events.
	SubscribeHtlcEvents(*SubscribeHtlcEventsRequest, Router_SubscribeHtlcEventsServer) error
	//*
	//Deprecated, use SendPaymentV2. SendPayment attempts to route a payment
	//described by the passed PaymentRequest to the final destination. The call
	//returns a stream of payment status updates.
	//
	// Deprecated: Do not use.
	SendPayment(*SendPaymentRequest, Router_SendPaymentServer) error
	//*
	//Deprecated, use TrackPaymentV2. TrackPayment returns an update stream for
	//the payment identified by the payment hash.
	//
	// Deprecated: Do not use.
	TrackPayment(*TrackPaymentRequest, Router_TrackPaymentServer) error
}

// UnimplementedRouterServer can be embedded to have forward compatible implementations.
type UnimplementedRouterServer struct {
}

func (*UnimplementedRouterServer) SendPaymentV2(req *SendPaymentRequest, srv Router_SendPaymentV2Server) error {
	return status.Errorf(codes.Unimplemented, "method SendPaymentV2 not implemented")
}
func (*UnimplementedRouterServer) TrackPaymentV2(req *TrackPaymentRequest, srv Router_TrackPaymentV2Server) error {
	return status.Errorf(codes.Unimplemented, "method TrackPaymentV2 not implemented")
}
func (*UnimplementedRouterServer) EstimateRouteFee(ctx context.Context, req *RouteFeeRequest) (*RouteFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateRouteFee not implemented")
}
func (*UnimplementedRouterServer) SendToRoute(ctx context.Context, req *SendToRouteRequest) (*SendToRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToRoute not implemented")
}
func (*UnimplementedRouterServer) ResetMissionControl(ctx context.Context, req *ResetMissionControlRequest) (*ResetMissionControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetMissionControl not implemented")
}
func (*UnimplementedRouterServer) QueryMissionControl(ctx context.Context, req *QueryMissionControlRequest) (*QueryMissionControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMissionControl not implemented")
}
func (*UnimplementedRouterServer) QueryProbability(ctx context.Context, req *QueryProbabilityRequest) (*QueryProbabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProbability not implemented")
}
func (*UnimplementedRouterServer) BuildRoute(ctx context.Context, req *BuildRouteRequest) (*BuildRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildRoute not implemented")
}
func (*UnimplementedRouterServer) SubscribeHtlcEvents(req *SubscribeHtlcEventsRequest, srv Router_SubscribeHtlcEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeHtlcEvents not implemented")
}
func (*UnimplementedRouterServer) SendPayment(req *SendPaymentRequest, srv Router_SendPaymentServer) error {
	return status.Errorf(codes.Unimplemented, "method SendPayment not implemented")
}
func (*UnimplementedRouterServer) TrackPayment(req *TrackPaymentRequest, srv Router_TrackPaymentServer) error {
	return status.Errorf(codes.Unimplemented, "method TrackPayment not implemented")
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_SendPaymentV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendPaymentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouterServer).SendPaymentV2(m, &routerSendPaymentV2Server{stream})
}

type Router_SendPaymentV2Server interface {
	Send(*lnrpc.Payment) error
	grpc.ServerStream
}

type routerSendPaymentV2Server struct {
	grpc.ServerStream
}

func (x *routerSendPaymentV2Server) Send(m *lnrpc.Payment) error {
	return x.ServerStream.SendMsg(m)
}

func _Router_TrackPaymentV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrackPaymentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouterServer).TrackPaymentV2(m, &routerTrackPaymentV2Server{stream})
}

type Router_TrackPaymentV2Server interface {
	Send(*lnrpc.Payment) error
	grpc.ServerStream
}

type routerTrackPaymentV2Server struct {
	grpc.ServerStream
}

func (x *routerTrackPaymentV2Server) Send(m *lnrpc.Payment) error {
	return x.ServerStream.SendMsg(m)
}

func _Router_EstimateRouteFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).EstimateRouteFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/EstimateRouteFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).EstimateRouteFee(ctx, req.(*RouteFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_SendToRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendToRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).SendToRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/SendToRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).SendToRoute(ctx, req.(*SendToRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_ResetMissionControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetMissionControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).ResetMissionControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/ResetMissionControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).ResetMissionControl(ctx, req.(*ResetMissionControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_QueryMissionControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMissionControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).QueryMissionControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/QueryMissionControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).QueryMissionControl(ctx, req.(*QueryMissionControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_QueryProbability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProbabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).QueryProbability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/QueryProbability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).QueryProbability(ctx, req.(*QueryProbabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_BuildRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).BuildRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/BuildRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).BuildRoute(ctx, req.(*BuildRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_SubscribeHtlcEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeHtlcEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouterServer).SubscribeHtlcEvents(m, &routerSubscribeHtlcEventsServer{stream})
}

type Router_SubscribeHtlcEventsServer interface {
	Send(*HtlcEvent) error
	grpc.ServerStream
}

type routerSubscribeHtlcEventsServer struct {
	grpc.ServerStream
}

func (x *routerSubscribeHtlcEventsServer) Send(m *HtlcEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Router_SendPayment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendPaymentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouterServer).SendPayment(m, &routerSendPaymentServer{stream})
}

type Router_SendPaymentServer interface {
	Send(*PaymentStatus) error
	grpc.ServerStream
}

type routerSendPaymentServer struct {
	grpc.ServerStream
}

func (x *routerSendPaymentServer) Send(m *PaymentStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _Router_TrackPayment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrackPaymentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouterServer).TrackPayment(m, &routerTrackPaymentServer{stream})
}

type Router_TrackPaymentServer interface {
	Send(*PaymentStatus) error
	grpc.ServerStream
}

type routerTrackPaymentServer struct {
	grpc.ServerStream
}

func (x *routerTrackPaymentServer) Send(m *PaymentStatus) error {
	return x.ServerStream.SendMsg(m)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerrpc.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EstimateRouteFee",
			Handler:    _Router_EstimateRouteFee_Handler,
		},
		{
			MethodName: "SendToRoute",
			Handler:    _Router_SendToRoute_Handler,
		},
		{
			MethodName: "ResetMissionControl",
			Handler:    _Router_ResetMissionControl_Handler,
		},
		{
			MethodName: "QueryMissionControl",
			Handler:    _Router_QueryMissionControl_Handler,
		},
		{
			MethodName: "QueryProbability",
			Handler:    _Router_QueryProbability_Handler,
		},
		{
			MethodName: "BuildRoute",
			Handler:    _Router_BuildRoute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendPaymentV2",
			Handler:       _Router_SendPaymentV2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TrackPaymentV2",
			Handler:       _Router_TrackPaymentV2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeHtlcEvents",
			Handler:       _Router_SubscribeHtlcEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendPayment",
			Handler:       _Router_SendPayment_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TrackPayment",
			Handler:       _Router_TrackPayment_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v0.10.0/routerrpc/router.proto",
}
